[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.12.5","content-config-digest","7abc23cbb2a59c6d","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://sparesparrow.github.io\",\"compressHTML\":true,\"base\":\"/sparrow-ai-tech\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"rawEnvValues\":false},\"legacy\":{\"collections\":false}}","projects",["Map",11,12,68,69,137,138,266,267],"mcp-project-orchestrator",{"id":11,"data":13,"body":17,"filePath":18,"digest":19,"rendered":20,"legacyId":67},{"title":11,"description":14,"repo_url":15,"pubDate":16},"Documentation for the mcp-project-orchestrator project.","https://github.com/sparesparrow/mcp-project-orchestrator.git",["Date","2025-07-30T00:00:00.000Z"],"# MCP Project Orchestrator\n\n[![CI/CD](https://github.com/sparesparrow/mcp-project-orchestrator/actions/workflows/ci.yml/badge.svg)](https://github.com/sparesparrow/mcp-project-orchestrator/actions/workflows/ci.yml)\n[![codecov](https://codecov.io/gh/sparesparrow/mcp-project-orchestrator/branch/main/graph/badge.svg)](https://codecov.io/gh/sparesparrow/mcp-project-orchestrator)\n[![PyPI version](https://badge.fury.io/py/mcp-project-orchestrator.svg)](https://badge.fury.io/py/mcp-project-orchestrator)\n[![Python 3.9+](https://img.shields.io/badge/python-3.9+-blue.svg)](https://www.python.org/downloads/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nA comprehensive project orchestration tool for managing Model Context Protocol (MCP) projects, templates, prompts, and Mermaid diagrams.\n\n## Features\n\n- **Template Management**\n  - Project templates for quick project setup\n  - Component templates for modular development\n  - Variable substitution and validation\n  - Template discovery and versioning\n\n- **Prompt Management**\n  - System and user prompt templates\n  - Variable substitution\n  - Prompt categorization and versioning\n  - Easy prompt discovery and reuse\n\n- **Mermaid Diagram Generation**\n  - Flowchart generation\n  - Sequence diagram generation\n  - Class diagram generation\n  - SVG and PNG rendering\n  - Diagram validation\n\n## Installation\n\n```bash\npip install mcp-project-orchestrator\n```\n\nOr with Poetry:\n\n```bash\npoetry add mcp-project-orchestrator\n```\n\n## Quick Start\n\n### Project Templates\n\n```python\nfrom mcp_project_orchestrator.templates import TemplateManager\n\n# Initialize template manager\nmanager = TemplateManager(\"path/to/templates\")\n\n# List available templates\ntemplates = manager.list_templates()\nprint(templates)\n\n# Apply a project template\nmanager.apply_template(\"fastapi-project\", {\n    \"project_name\": \"my-api\",\n    \"project_description\": \"My FastAPI project\",\n    \"author_name\": \"John Doe\",\n    \"author_email\": \"john@example.com\"\n})\n```\n\n### Prompt Management\n\n```python\nfrom mcp_project_orchestrator.prompts import PromptManager\n\n# Initialize prompt manager\nmanager = PromptManager(\"path/to/prompts\")\n\n# List available prompts\nprompts = manager.list_prompts()\nprint(prompts)\n\n# Render a prompt with variables\nrendered = manager.render_prompt(\"system-prompt\", {\n    \"name\": \"User\",\n    \"project\": \"MCP\"\n})\nprint(rendered)\n```\n\n### Mermaid Diagrams\n\n```python\nfrom mcp_project_orchestrator.mermaid import MermaidGenerator, MermaidRenderer\n\n# Initialize generators\ngenerator = MermaidGenerator()\nrenderer = MermaidRenderer()\n\n# Generate a flowchart\nflowchart = generator.generate_flowchart(\n    nodes=[\n        (\"A\", \"Start\"),\n        (\"B\", \"Process\"),\n        (\"C\", \"End\")\n    ],\n    edges=[\n        (\"A\", \"B\", \"\"),\n        (\"B\", \"C\", \"\")\n    ]\n)\n\n# Render to SVG\nrenderer.render(flowchart, \"flowchart.svg\")\n```\n\n## Project Structure\n\n```\nmcp-project-orchestrator/\n├── src/\n│   └── mcp_project_orchestrator/\n│       ├── templates/\n│       │   ├── __init__.py\n│       │   ├── base.py\n│       │   ├── project.py\n│       │   ├── component.py\n│       │   └── manager.py\n│       ├── prompts/\n│       │   ├── __init__.py\n│       │   ├── template.py\n│       │   └── manager.py\n│       └── mermaid/\n│           ├── __init__.py\n│           ├── generator.py\n│           └── renderer.py\n├── tests/\n│   ├── __init__.py\n│   ├── conftest.py\n│   ├── test_templates.py\n│   ├── test_prompts.py\n│   └── test_mermaid.py\n├── docs/\n├── examples/\n├── .github/\n│   └── workflows/\n│       └── ci.yml\n├── pyproject.toml\n├── Containerfile\n└── README.md\n```\n\n## Development\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/sparesparrow/mcp-project-orchestrator.git\ncd mcp-project-orchestrator\n```\n\n2. Install dependencies:\n```bash\npoetry install\n```\n\n3. Run tests:\n```bash\npoetry run pytest\n```\n\n4. Run linting:\n```bash\npoetry run ruff check .\npoetry run mypy src/mcp_project_orchestrator\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Commit your changes\n4. Push to the branch\n5. Create a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Acknowledgments\n\n- [Model Context Protocol](https://github.com/sparesparrow/model-context-protocol) - The foundation for this project\n- [Mermaid](https://mermaid-js.github.io/mermaid/) - For diagram generation\n- [Poetry](https://python-poetry.org/) - For dependency management\n- [Ruff](https://github.com/astral-sh/ruff) - For linting\n- [mypy](https://mypy.readthedocs.io/) - For type checking","src/content/projects/mcp-project-orchestrator.md","ee5aa2c7ccdebd0c",{"html":21,"metadata":22},"\u003Ch1 id=\"mcp-project-orchestrator\">MCP Project Orchestrator\u003C/h1>\n\u003Cp>\u003Ca href=\"https://github.com/sparesparrow/mcp-project-orchestrator/actions/workflows/ci.yml\">\u003Cimg src=\"https://github.com/sparesparrow/mcp-project-orchestrator/actions/workflows/ci.yml/badge.svg\" alt=\"CI/CD\">\u003C/a>\n\u003Ca href=\"https://codecov.io/gh/sparesparrow/mcp-project-orchestrator\">\u003Cimg src=\"https://codecov.io/gh/sparesparrow/mcp-project-orchestrator/branch/main/graph/badge.svg\" alt=\"codecov\">\u003C/a>\n\u003Ca href=\"https://badge.fury.io/py/mcp-project-orchestrator\">\u003Cimg src=\"https://badge.fury.io/py/mcp-project-orchestrator.svg\" alt=\"PyPI version\">\u003C/a>\n\u003Ca href=\"https://www.python.org/downloads/\">\u003Cimg src=\"https://img.shields.io/badge/python-3.9+-blue.svg\" alt=\"Python 3.9+\">\u003C/a>\n\u003Ca href=\"https://opensource.org/licenses/MIT\">\u003Cimg src=\"https://img.shields.io/badge/License-MIT-yellow.svg\" alt=\"License: MIT\">\u003C/a>\u003C/p>\n\u003Cp>A comprehensive project orchestration tool for managing Model Context Protocol (MCP) projects, templates, prompts, and Mermaid diagrams.\u003C/p>\n\u003Ch2 id=\"features\">Features\u003C/h2>\n\u003Cul>\n\u003Cli>\n\u003Cp>\u003Cstrong>Template Management\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>Project templates for quick project setup\u003C/li>\n\u003Cli>Component templates for modular development\u003C/li>\n\u003Cli>Variable substitution and validation\u003C/li>\n\u003Cli>Template discovery and versioning\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Prompt Management\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>System and user prompt templates\u003C/li>\n\u003Cli>Variable substitution\u003C/li>\n\u003Cli>Prompt categorization and versioning\u003C/li>\n\u003Cli>Easy prompt discovery and reuse\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Cstrong>Mermaid Diagram Generation\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>Flowchart generation\u003C/li>\n\u003Cli>Sequence diagram generation\u003C/li>\n\u003Cli>Class diagram generation\u003C/li>\n\u003Cli>SVG and PNG rendering\u003C/li>\n\u003Cli>Diagram validation\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"installation\">Installation\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">pip\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> mcp-project-orchestrator\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Or with Poetry:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">poetry\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> add\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> mcp-project-orchestrator\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"quick-start\">Quick Start\u003C/h2>\n\u003Ch3 id=\"project-templates\">Project Templates\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> mcp_project_orchestrator.templates \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> TemplateManager\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Initialize template manager\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">manager \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> TemplateManager(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"path/to/templates\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># List available templates\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">templates \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> manager.list_templates()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(templates)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Apply a project template\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">manager.apply_template(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"fastapi-project\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"project_name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"my-api\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"project_description\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"My FastAPI project\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"author_name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"John Doe\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"author_email\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"john@example.com\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"prompt-management\">Prompt Management\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> mcp_project_orchestrator.prompts \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> PromptManager\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Initialize prompt manager\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">manager \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> PromptManager(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"path/to/prompts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># List available prompts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">prompts \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> manager.list_prompts()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(prompts)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Render a prompt with variables\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">rendered \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> manager.render_prompt(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"system-prompt\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"User\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"project\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"MCP\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(rendered)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"mermaid-diagrams\">Mermaid Diagrams\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> mcp_project_orchestrator.mermaid \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> MermaidGenerator, MermaidRenderer\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Initialize generators\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">generator \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> MermaidGenerator()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">renderer \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> MermaidRenderer()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Generate a flowchart\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">flowchart \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> generator.generate_flowchart(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    nodes\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        (\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"A\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Start\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        (\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"B\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Process\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        (\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"C\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"End\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    edges\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        (\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"A\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"B\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        (\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"B\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"C\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Render to SVG\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">renderer.render(flowchart, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"flowchart.svg\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"project-structure\">Project Structure\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>mcp-project-orchestrator/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── src/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   └── mcp_project_orchestrator/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│       ├── templates/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│       │   ├── __init__.py\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│       │   ├── base.py\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│       │   ├── project.py\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│       │   ├── component.py\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│       │   └── manager.py\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│       ├── prompts/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│       │   ├── __init__.py\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│       │   ├── template.py\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│       │   └── manager.py\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│       └── mermaid/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│           ├── __init__.py\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│           ├── generator.py\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│           └── renderer.py\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── tests/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   ├── __init__.py\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   ├── conftest.py\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   ├── test_templates.py\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   ├── test_prompts.py\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   └── test_mermaid.py\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── docs/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── examples/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── .github/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   └── workflows/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│       └── ci.yml\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── pyproject.toml\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── Containerfile\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>└── README.md\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"development\">Development\u003C/h2>\n\u003Col>\n\u003Cli>Clone the repository:\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> clone\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> https://github.com/sparesparrow/mcp-project-orchestrator.git\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">cd\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> mcp-project-orchestrator\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Col start=\"2\">\n\u003Cli>Install dependencies:\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">poetry\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Col start=\"3\">\n\u003Cli>Run tests:\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">poetry\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> run\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> pytest\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Col start=\"4\">\n\u003Cli>Run linting:\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">poetry\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> run\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ruff\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> check\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> .\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">poetry\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> run\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> mypy\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> src/mcp_project_orchestrator\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"contributing\">Contributing\u003C/h2>\n\u003Col>\n\u003Cli>Fork the repository\u003C/li>\n\u003Cli>Create a feature branch\u003C/li>\n\u003Cli>Commit your changes\u003C/li>\n\u003Cli>Push to the branch\u003C/li>\n\u003Cli>Create a Pull Request\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"license\">License\u003C/h2>\n\u003Cp>This project is licensed under the MIT License - see the \u003Ca href=\"LICENSE\">LICENSE\u003C/a> file for details.\u003C/p>\n\u003Ch2 id=\"acknowledgments\">Acknowledgments\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://github.com/sparesparrow/model-context-protocol\">Model Context Protocol\u003C/a> - The foundation for this project\u003C/li>\n\u003Cli>\u003Ca href=\"https://mermaid-js.github.io/mermaid/\">Mermaid\u003C/a> - For diagram generation\u003C/li>\n\u003Cli>\u003Ca href=\"https://python-poetry.org/\">Poetry\u003C/a> - For dependency management\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/astral-sh/ruff\">Ruff\u003C/a> - For linting\u003C/li>\n\u003Cli>\u003Ca href=\"https://mypy.readthedocs.io/\">mypy\u003C/a> - For type checking\u003C/li>\n\u003C/ul>",{"headings":23,"localImagePaths":62,"remoteImagePaths":63,"frontmatter":64,"imagePaths":66},[24,27,31,34,37,41,44,47,50,53,56,59],{"depth":25,"slug":11,"text":26},1,"MCP Project Orchestrator",{"depth":28,"slug":29,"text":30},2,"features","Features",{"depth":28,"slug":32,"text":33},"installation","Installation",{"depth":28,"slug":35,"text":36},"quick-start","Quick Start",{"depth":38,"slug":39,"text":40},3,"project-templates","Project Templates",{"depth":38,"slug":42,"text":43},"prompt-management","Prompt Management",{"depth":38,"slug":45,"text":46},"mermaid-diagrams","Mermaid Diagrams",{"depth":28,"slug":48,"text":49},"project-structure","Project Structure",{"depth":28,"slug":51,"text":52},"development","Development",{"depth":28,"slug":54,"text":55},"contributing","Contributing",{"depth":28,"slug":57,"text":58},"license","License",{"depth":28,"slug":60,"text":61},"acknowledgments","Acknowledgments",[],[],{"title":11,"description":14,"repo_url":15,"pubDate":65},"2025-07-30",[],"mcp-project-orchestrator.md","mcp-prompts-rs",{"id":68,"data":70,"body":74,"filePath":75,"digest":76,"rendered":77,"legacyId":136},{"title":68,"description":71,"repo_url":72,"pubDate":73},"Documentation for the mcp-prompts-rs project.","https://github.com/sparesparrow/mcp-prompts-rs.git",["Date","2025-07-30T00:00:00.000Z"],"# mcp-prompts-rs\n\nA Rust-based server for managing AI prompts using the Model Context Protocol (MCP).\n\n## Overview\n\nmcp-prompts-rs is a Rust implementation of a prompt management server that adheres to the Model Context Protocol (MCP), an open standard for connecting AI applications to data sources and tools. This project is a Rust rewrite of the original [mcp-prompts](https://github.com/sparesparrow/mcp-prompts) TypeScript implementation.\n\nThe server provides functionality for storing, retrieving, and managing AI prompts with support for template variables, categorization, and multiple storage backends.\n\n## Features\n\n- **Prompt Management**: Create, retrieve, update, and delete prompts with categorization\n- **Template Support**: Create prompts with variables for runtime customization\n- **Storage Backends**: Support for file system and PostgreSQL storage options\n- **API**: RESTful endpoints with Server-Sent Events (SSE) for real-time updates\n- **MCP Integration**: Implements the Model Context Protocol for seamless integration with AI assistants like Claude\n- **Project Orchestration**: Tools for automating software project creation using templates\n- **Deployment**: Docker support and health check endpoints\n\n## Installation\n\n### Prerequisites\n\n- Rust 1.70 or higher\n- Cargo (Rust's package manager)\n- Optional: PostgreSQL for database storage\n\n### Setup\n\n1. Clone the repository:\n\n```bash\ngit clone https://github.com/your-username/mcp-prompts-rs.git\ncd mcp-prompts-rs\n```\n\n2. Build the project:\n\n```bash\ncargo build\n```\n\n## Usage\n\n### Running the Server\n\nStart the server with default settings:\n\n```bash\ncargo run\n```\n\nWith custom configuration:\n\n```bash\ncargo run -- --port 3000 --storage filesystem\n```\n\n### CLI Options\n\n- `--port \u003CPORT>`: Set the server port (default: 8080)\n- `--storage \u003CTYPE>`: Choose storage backend (filesystem, postgres)\n- `--db-url \u003CURL>`: PostgreSQL connection string (when using postgres storage)\n- `--prompt-dir \u003CDIR>`: Directory for prompt storage (when using filesystem storage)\n\n## Integration with Claude\n\nTo integrate with Claude Desktop:\n\n1. Open Claude Desktop\n2. Go to Settings → Developer → Edit Config\n3. Add the following to your configuration:\n\n```json\n{\n  \"mcp\": {\n    \"servers\": [\n      {\n        \"name\": \"mcp-prompts-rs\",\n        \"url\": \"http://localhost:8080\"\n      }\n    ]\n  }\n}\n```\n\n## API Endpoints\n\n### Prompts\n\n- `GET /prompts`: List all prompts\n- `GET /prompts/:id`: Get a specific prompt\n- `POST /prompts`: Create a new prompt (requires at least `name` and `content` fields)\n- `PUT /prompts/:id`: Update an existing prompt (requires at least `name` and `content` fields)\n- `DELETE /prompts/:id`: Delete a prompt\n\n#### Example Usage (with curl)\n\n- **List all prompts:**\n  ```bash\n  curl -X GET http://localhost:3000/prompts\n  ```\n- **Create a prompt:**\n  ```bash\n  curl -X POST http://localhost:3000/prompts \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"name\": \"test-prompt\", \"title\": \"Test Prompt\", \"content\": \"This is a test prompt.\"}'\n  ```\n- **Get a prompt by ID:**\n  ```bash\n  curl -X GET http://localhost:3000/prompts/\u003Cid>\n  ```\n- **Update a prompt:**\n  ```bash\n  curl -X PUT http://localhost:3000/prompts/\u003Cid> \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"name\": \"test-prompt\", \"title\": \"Updated Test Prompt\", \"content\": \"This is an updated test prompt.\"}'\n  ```\n- **Delete a prompt:**\n  ```bash\n  curl -X DELETE http://localhost:3000/prompts/\u003Cid>\n  ```\n\n### SSE\n\n- `GET /events`: Server-Sent Events endpoint for real-time updates\n\n## Development\n\n### Project Structure\n\n- `src/main.rs`: Entry point and server setup\n- `src/prompt/`: Prompt models and logic\n- `src/storage/`: Storage backend implementations\n- `src/api/`: API endpoint handlers\n- `src/template/`: Template processing utilities\n\n### Building from Source\n\n```bash\ncargo build\n```\n\n### Running Tests\n\n```bash\ncargo test\n```\n\n## Docker Support\n\nBuild and run with Docker:\n\n```bash\ndocker build -t mcp-prompts-rs .\ndocker run -p 8080:8080 mcp-prompts-rs\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the Apache License 2.0 - see the [LICENSE](LICENSE) file for details.\n\n## Acknowledgments\n\n- Original [mcp-prompts](https://github.com/sparesparrow/mcp-prompts) TypeScript project\n- [Model Context Protocol](https://github.com/modelcontextprotocol)\n- [Rust SDK for MCP](https://github.com/modelcontextprotocol/rust-sdk)","src/content/projects/mcp-prompts-rs.md","24d1d190b57cb856",{"html":78,"metadata":79},"\u003Ch1 id=\"mcp-prompts-rs\">mcp-prompts-rs\u003C/h1>\n\u003Cp>A Rust-based server for managing AI prompts using the Model Context Protocol (MCP).\u003C/p>\n\u003Ch2 id=\"overview\">Overview\u003C/h2>\n\u003Cp>mcp-prompts-rs is a Rust implementation of a prompt management server that adheres to the Model Context Protocol (MCP), an open standard for connecting AI applications to data sources and tools. This project is a Rust rewrite of the original \u003Ca href=\"https://github.com/sparesparrow/mcp-prompts\">mcp-prompts\u003C/a> TypeScript implementation.\u003C/p>\n\u003Cp>The server provides functionality for storing, retrieving, and managing AI prompts with support for template variables, categorization, and multiple storage backends.\u003C/p>\n\u003Ch2 id=\"features\">Features\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Prompt Management\u003C/strong>: Create, retrieve, update, and delete prompts with categorization\u003C/li>\n\u003Cli>\u003Cstrong>Template Support\u003C/strong>: Create prompts with variables for runtime customization\u003C/li>\n\u003Cli>\u003Cstrong>Storage Backends\u003C/strong>: Support for file system and PostgreSQL storage options\u003C/li>\n\u003Cli>\u003Cstrong>API\u003C/strong>: RESTful endpoints with Server-Sent Events (SSE) for real-time updates\u003C/li>\n\u003Cli>\u003Cstrong>MCP Integration\u003C/strong>: Implements the Model Context Protocol for seamless integration with AI assistants like Claude\u003C/li>\n\u003Cli>\u003Cstrong>Project Orchestration\u003C/strong>: Tools for automating software project creation using templates\u003C/li>\n\u003Cli>\u003Cstrong>Deployment\u003C/strong>: Docker support and health check endpoints\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"installation\">Installation\u003C/h2>\n\u003Ch3 id=\"prerequisites\">Prerequisites\u003C/h3>\n\u003Cul>\n\u003Cli>Rust 1.70 or higher\u003C/li>\n\u003Cli>Cargo (Rust’s package manager)\u003C/li>\n\u003Cli>Optional: PostgreSQL for database storage\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"setup\">Setup\u003C/h3>\n\u003Col>\n\u003Cli>Clone the repository:\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> clone\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> https://github.com/your-username/mcp-prompts-rs.git\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">cd\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> mcp-prompts-rs\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Col start=\"2\">\n\u003Cli>Build the project:\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">cargo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> build\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"usage\">Usage\u003C/h2>\n\u003Ch3 id=\"running-the-server\">Running the Server\u003C/h3>\n\u003Cp>Start the server with default settings:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">cargo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> run\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>With custom configuration:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">cargo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> run\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --port\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3000\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --storage\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> filesystem\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"cli-options\">CLI Options\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Ccode>--port &#x3C;PORT>\u003C/code>: Set the server port (default: 8080)\u003C/li>\n\u003Cli>\u003Ccode>--storage &#x3C;TYPE>\u003C/code>: Choose storage backend (filesystem, postgres)\u003C/li>\n\u003Cli>\u003Ccode>--db-url &#x3C;URL>\u003C/code>: PostgreSQL connection string (when using postgres storage)\u003C/li>\n\u003Cli>\u003Ccode>--prompt-dir &#x3C;DIR>\u003C/code>: Directory for prompt storage (when using filesystem storage)\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"integration-with-claude\">Integration with Claude\u003C/h2>\n\u003Cp>To integrate with Claude Desktop:\u003C/p>\n\u003Col>\n\u003Cli>Open Claude Desktop\u003C/li>\n\u003Cli>Go to Settings → Developer → Edit Config\u003C/li>\n\u003Cli>Add the following to your configuration:\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"mcp\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"servers\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        \"name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"mcp-prompts-rs\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        \"url\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"http://localhost:8080\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"api-endpoints\">API Endpoints\u003C/h2>\n\u003Ch3 id=\"prompts\">Prompts\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Ccode>GET /prompts\u003C/code>: List all prompts\u003C/li>\n\u003Cli>\u003Ccode>GET /prompts/:id\u003C/code>: Get a specific prompt\u003C/li>\n\u003Cli>\u003Ccode>POST /prompts\u003C/code>: Create a new prompt (requires at least \u003Ccode>name\u003C/code> and \u003Ccode>content\u003C/code> fields)\u003C/li>\n\u003Cli>\u003Ccode>PUT /prompts/:id\u003C/code>: Update an existing prompt (requires at least \u003Ccode>name\u003C/code> and \u003Ccode>content\u003C/code> fields)\u003C/li>\n\u003Cli>\u003Ccode>DELETE /prompts/:id\u003C/code>: Delete a prompt\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"example-usage-with-curl\">Example Usage (with curl)\u003C/h4>\n\u003Cul>\n\u003Cli>\u003Cstrong>List all prompts:\u003C/strong>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">curl\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -X\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> GET\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> http://localhost:3000/prompts\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003C/li>\n\u003Cli>\u003Cstrong>Create a prompt:\u003C/strong>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">curl\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -X\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> POST\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> http://localhost:3000/prompts\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  -H\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Content-Type: application/json\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  -d\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '{\"name\": \"test-prompt\", \"title\": \"Test Prompt\", \"content\": \"This is a test prompt.\"}'\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003C/li>\n\u003Cli>\u003Cstrong>Get a prompt by ID:\u003C/strong>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">curl\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -X\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> GET\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> http://localhost:3000/prompts/\u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#9ECBFF\">i\u003C/span>\u003Cspan style=\"color:#E1E4E8\">d\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003C/li>\n\u003Cli>\u003Cstrong>Update a prompt:\u003C/strong>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">curl\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -X\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> PUT\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> http://localhost:3000/prompts/\u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#9ECBFF\">i\u003C/span>\u003Cspan style=\"color:#E1E4E8\">d\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  -H\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Content-Type: application/json\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  -d\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '{\"name\": \"test-prompt\", \"title\": \"Updated Test Prompt\", \"content\": \"This is an updated test prompt.\"}'\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003C/li>\n\u003Cli>\u003Cstrong>Delete a prompt:\u003C/strong>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">curl\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -X\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> DELETE\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> http://localhost:3000/prompts/\u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#9ECBFF\">i\u003C/span>\u003Cspan style=\"color:#E1E4E8\">d\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"sse\">SSE\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Ccode>GET /events\u003C/code>: Server-Sent Events endpoint for real-time updates\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"development\">Development\u003C/h2>\n\u003Ch3 id=\"project-structure\">Project Structure\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Ccode>src/main.rs\u003C/code>: Entry point and server setup\u003C/li>\n\u003Cli>\u003Ccode>src/prompt/\u003C/code>: Prompt models and logic\u003C/li>\n\u003Cli>\u003Ccode>src/storage/\u003C/code>: Storage backend implementations\u003C/li>\n\u003Cli>\u003Ccode>src/api/\u003C/code>: API endpoint handlers\u003C/li>\n\u003Cli>\u003Ccode>src/template/\u003C/code>: Template processing utilities\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"building-from-source\">Building from Source\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">cargo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> build\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"running-tests\">Running Tests\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">cargo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> test\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"docker-support\">Docker Support\u003C/h2>\n\u003Cp>Build and run with Docker:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">docker\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> build\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -t\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> mcp-prompts-rs\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> .\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">docker\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> run\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -p\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 8080:8080\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> mcp-prompts-rs\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"contributing\">Contributing\u003C/h2>\n\u003Cp>Contributions are welcome! Please feel free to submit a Pull Request.\u003C/p>\n\u003Col>\n\u003Cli>Fork the repository\u003C/li>\n\u003Cli>Create your feature branch (\u003Ccode>git checkout -b feature/amazing-feature\u003C/code>)\u003C/li>\n\u003Cli>Commit your changes (\u003Ccode>git commit -m 'Add some amazing feature'\u003C/code>)\u003C/li>\n\u003Cli>Push to the branch (\u003Ccode>git push origin feature/amazing-feature\u003C/code>)\u003C/li>\n\u003Cli>Open a Pull Request\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"license\">License\u003C/h2>\n\u003Cp>This project is licensed under the Apache License 2.0 - see the \u003Ca href=\"LICENSE\">LICENSE\u003C/a> file for details.\u003C/p>\n\u003Ch2 id=\"acknowledgments\">Acknowledgments\u003C/h2>\n\u003Cul>\n\u003Cli>Original \u003Ca href=\"https://github.com/sparesparrow/mcp-prompts\">mcp-prompts\u003C/a> TypeScript project\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/modelcontextprotocol\">Model Context Protocol\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/modelcontextprotocol/rust-sdk\">Rust SDK for MCP\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":80,"localImagePaths":132,"remoteImagePaths":133,"frontmatter":134,"imagePaths":135},[81,82,85,86,87,90,93,96,99,102,105,108,111,115,118,119,120,123,126,129,130,131],{"depth":25,"slug":68,"text":68},{"depth":28,"slug":83,"text":84},"overview","Overview",{"depth":28,"slug":29,"text":30},{"depth":28,"slug":32,"text":33},{"depth":38,"slug":88,"text":89},"prerequisites","Prerequisites",{"depth":38,"slug":91,"text":92},"setup","Setup",{"depth":28,"slug":94,"text":95},"usage","Usage",{"depth":38,"slug":97,"text":98},"running-the-server","Running the Server",{"depth":38,"slug":100,"text":101},"cli-options","CLI Options",{"depth":28,"slug":103,"text":104},"integration-with-claude","Integration with Claude",{"depth":28,"slug":106,"text":107},"api-endpoints","API Endpoints",{"depth":38,"slug":109,"text":110},"prompts","Prompts",{"depth":112,"slug":113,"text":114},4,"example-usage-with-curl","Example Usage (with curl)",{"depth":38,"slug":116,"text":117},"sse","SSE",{"depth":28,"slug":51,"text":52},{"depth":38,"slug":48,"text":49},{"depth":38,"slug":121,"text":122},"building-from-source","Building from Source",{"depth":38,"slug":124,"text":125},"running-tests","Running Tests",{"depth":28,"slug":127,"text":128},"docker-support","Docker Support",{"depth":28,"slug":54,"text":55},{"depth":28,"slug":57,"text":58},{"depth":28,"slug":60,"text":61},[],[],{"title":68,"description":71,"repo_url":72,"pubDate":65},[],"mcp-prompts-rs.md","human-action",{"id":137,"data":139,"body":143,"filePath":144,"assetImports":145,"digest":149,"rendered":150,"legacyId":265},{"title":137,"description":140,"repo_url":141,"pubDate":142},"Documentation for the human-action project.","https://github.com/sparesparrow/human-action.git",["Date","2025-07-30T00:00:00.000Z"],"# Lidské Jednání Project / Projekt Lidské Jednání\n\n## Overview / Přehled\n\nTento projekt zpracovává český překlad knihy \"Human Action\" (Lidské Jednání) z formátu PDF do optimalizovaných zvukových souborů prostřednictvím série kroků zpracování. Kódová základna obsahuje několik modulů, které zpracovávají různé aspekty zpracovatelského řetězce.\n\nThis project processes the Czech translation of the book \"Human Action\" (Lidské Jednání) from PDF format into optimized audio files through a series of processing steps. The codebase includes several modules that handle different aspects of the processing pipeline.\n\n## STAV\n- Textová data připravena: [4-markdown-chunks-optimized](./data/4-markdown-chunks-optimized)\n- Vylepšování obsahu pro Elevenlabs API:\n![Screenshot](data/screenshots/Screenshot_20250407_023826.png)\n- TODO: dokončit generování všech kapitol\n  - `python audio_chunk_generator.py data/4-markdown-chunks-optimized/chapter_XX-OPTIMIZED.md` (ElevenLabs)\n  - nebo `python espeak_audio_chunk_generator.py data/4-markdown-chunks-optimized/chapter_XX-OPTIMIZED.md` (espeak-ng)\n  - nebo hromadně `./generate_espeak_audio.sh` (zpracuje všechny zbývající soubory pomocí espeak-ng)\n- Regularly publishing to [youtube](https://youtube.com/playlist?list=PLaWOvDBjg6WiUcQm-yEP1RskMfPeWMKTL)\n\n## Automatizace celé pipeline (od PDF k publikaci audioknihy) na jedno tlačítko\n- tohle je cíl, ale protože většina kroků pipeline už proběhla neautomatizovaně, bude to předmětem optimalizace kódu před zpracováním následujícího titulu\n\n## Setup / Nastavení\n\n### Requirements / Požadavky\n\n- Python 3.8+\n- ffmpeg (for audio manipulation)\n- espeak-ng (for open-source TTS alternative)\n- API keys for:\n  - Anthropic Claude API (text optimization)\n  - ElevenLabs API (text-to-speech)\n\n### Installation / Instalace\n\n```bash\n# Clone the repository / Klonování repozitáře\ngit clone https://github.com/sparesparrow/human-action.git\ncd human-action\n\n# Create and activate virtual environment / Vytvoření a aktivace virtuálního prostředí\npython3 -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies / Instalace závislostí\npip install -r requirements.txt\n\n# Install system dependencies (Ubuntu/Debian)\nsudo apt-get install ffmpeg espeak-ng\n\n# Or on macOS\nbrew install ffmpeg espeak-ng\n```\n\n### Environment Setup / Nastavení prostředí\n\nCreate a `.env` file in the root directory with your API keys:\n\n```\nANTHROPIC_API_KEY=your_anthropic_api_key\nELEVENLABS_API_KEY=your_elevenlabs_api_key\n```\n\n## Processing Pipeline / Postup zpracování\n\n```mermaid\ngraph TD\n    A[PDF Files] -->|pdf_extractor.py| B[Markdown Chapters]\n    B -->|chunker_splitter.py| C[Markdown Chunks]\n    C -->|text_optimizer.py| D[Optimized Markdown Chunks]\n    D -->|audio_chunk_generator.py| E[Audio Chunks]\n    D -->|espeak_audio_chunk_generator.py| E2[Espeak Audio Chunks]\n    E -->|audio_concatenator.py| F[Audio Chapters]\n    E2 -->|audio_concatenator.py| F\n```\n\n## Directory Structure / Adresářová struktura\n\n- [1-pdf](./data/1-pdf): Source PDF files / Zdrojové PDF soubory\n- [2-markdown-chapters](./data/2-markdown-chapters): Extracted markdown chapters / Extrahované markdown kapitoly\n- [3-markdown-chunks](./data/3-markdown-chunks): Split markdown files / Rozdělené markdown soubory\n- [4-markdown-chunks-optimized](./data/4-markdown-chunks-optimized): Optimized markdown segments / Optimalizované markdown segmenty\n- [5-audio-chunks](./data/5-audio-chunks): Audio files generated using ElevenLabs / Zvukové soubory vygenerované pomocí ElevenLabs\n- [5-audio-chunks-espeak](./data/5-audio-chunks-espeak): Audio files generated using espeak-ng / Zvukové soubory vygenerované pomocí espeak-ng\n- [6-audio-chapters](./data/6-audio-chapters): Concatenated audio files into complete chapters / Spojené zvukové soubory do ucelených kapitol\n\n## Modules / Moduly\n\n### 1. PDF Extractor (`pdf_extractor.py`)\nExtracts text from PDF files and creates markdown chapter files.\n- **Input:** PDF file(s) from `data/1-pdf`\n- **Output:** Markdown chapter files in `data/2-markdown-chapters`\n\n### 2. Chunker Splitter (`chunker_splitter.py`)\nSplits markdown chapter files into smaller segments for easier processing.\n- **Input:** Markdown chapter files from `data/2-markdown-chapters`\n- **Output:** Markdown chunks in `data/3-markdown-chunks`\n- **Chunk size:** Maximum 5,000 characters per segment\n\n### 3. Text Optimizer (`text_optimizer.py`)\nOptimizes markdown chunks for speech synthesis using the Anthropic API.\n- **Input:** Markdown chunks from `data/3-markdown-chunks`\n- **Output:** Optimized markdown chunks in `data/4-markdown-chunks-optimized`\n- **Optimization:** Removes references, footnotes, page numbers; joins hyphenated words at line breaks; fixes formatting\n\n### 4a. Audio Chunk Generator (`audio_chunk_generator.py`)\nConverts text files to audio using the ElevenLabs API.\n- **Input:** Optimized markdown files from `data/4-markdown-chunks-optimized`\n- **Output:** Audio files in `data/5-audio-chunks`\n- **Postprocessing:** After processing, input files are marked with the prefix \"AUDIO_GENERATED-\" to indicate they have been converted to audio\n\n### 4b. Espeak Audio Chunk Generator (`espeak_audio_chunk_generator.py`)\nAlternative converter using the open-source espeak-ng TTS engine.\n- **Input:** Optimized markdown files from `data/4-markdown-chunks-optimized`\n- **Output:** Audio files in `data/5-audio-chunks-espeak`\n- **Features:** Free and open-source, works offline, supports Czech language\n- **Note:** Lower audio quality than ElevenLabs but useful for prototyping and development\n\n### 5. Audio Concatenator (`audio_concatenator.py`)\nConcatenates multiple audio chunks into complete chapter audio files.\n- **Input:** Audio chunks from `data/5-audio-chunks` or `data/5-audio-chunks-espeak`\n- **Output:** Complete chapter audio files in `data/6-audio-chapters`\n\n## Testing / Testování\n\nThe project includes a comprehensive test suite to validate the functionality of all pipeline components.\n\n### Running Tests\n\nYou can run tests using the provided script:\n\n```bash\n# Run all tests\n./run_tests.py\n\n# Run only unit tests\n./run_tests.py --unit\n\n# Run only integration tests\n./run_tests.py --integration\n\n# Run with verbose output\n./run_tests.py -v\n```\n\nOr directly using pytest:\n\n```bash\n# Install pytest if not already installed\npip install pytest\n\n# Run all tests\npytest tests/\n\n# Run a specific test file\npytest tests/unit/test_pdf_extractor.py\n```\n\n### Test Structure\n\n- **Unit Tests:** Individual component tests in `tests/unit/`\n- **Integration Tests:** End-to-end pipeline tests in `tests/integration/`\n- **Test Fixtures:** Sample data for testing in `tests/fixtures/`\n\n### Cost-Saving Measures\n\nThe tests avoid using APIs that incur costs:\n- Uses `espeak` instead of ElevenLabs for audio synthesis\n- Skips testing the text optimization that would use Anthropic API\n\nSee `tests/README.md` for more details on the testing strategy.\n\n## Batch Processing / Hromadné zpracování\n\nTo process all remaining files using espeak-ng, run:\n\n```bash\n./generate_espeak_audio.sh\n```\n\nThis will:\n1. Process all remaining markdown files that haven't been converted to audio yet\n2. Save the generated audio files to `data/5-audio-chunks-espeak`\n3. Track progress in `espeak_progress.json`\n4. Log detailed information to `espeak_generation.log`\n\nYou can customize the processing with these parameters:\n\n```bash\n# Process with different voice and rate\n./generate_espeak_audio.sh -v cs -r 160 -p 55\n\n# Process only a limited number of files\n./generate_espeak_audio.sh --max-files 5\n\n# See all available options\n./generate_espeak_audio.sh --help\n```\n\n## Text-to-Speech Formatting / Formátování textu pro syntézu řeči\n\nFor better control over speech synthesis in ElevenLabs, you can use these special formatting tags:\n\n### Pauses / Pauzy\n```markdown\n\u003Cbreak time=\"1s\" />     \u003C!-- 1 second pause -->\n\u003Cbreak time=\"500ms\" />  \u003C!-- 500 millisecond pause -->\n```\n![Screenshot](data/screenshots/Screenshot_20250406_225133.png)\n\n### Voice Adjustments / Úpravy hlasu\n\n```\n\u003Cprosody rate=\"slow\" pitch=\"+20%\">Text with higher pitch and slower rate\u003C/prosody>\n\u003Cemphasis level=\"strong\">Strongly emphasized text\u003C/emphasis>\n```\n\n### Greek Letters and Variables / Řecká písmena a proměnné\n\nFor Greek letters and variables, use plain text pronunciation:\n\n```\n\"alfa účinku\" instead of \"α účinku\"\n\"pé jedna větší než pé\" instead of \"p₁ > p\"\n```\n\n## Using LLMs for enhancing voice synthesis generated by Elevenlabs\n- Use and improve [Cursor rules]:\n  - [content-structuring](.cursor/rules/elevenlabs-content-structuring.mdc)\n  - [czech-preprocessing](.cursor/rules/elevenlabs-czech-preprocessing.mdc)\n  - [economic-terminology](.cursor/rules/elevenlabs-economic-terminology.mdc)\n  - [narrative-flow-optimization](.cursor/rules/elevenlabs-narrative-flow-optimization.mdc)\n![Screenshot](data/screenshots/Screenshot_20250406_225924.png)\n\n## FFmpeg Commands for Audio Manipulation / FFmpeg příkazy pro manipulaci s audio\n\nThe `audio_concatenator.py` module uses ffmpeg for audio concatenation. Here are some useful ffmpeg commands:\n\n### Concatenating Multiple Audio Files\n\n```bash\n# Using a file list\nffmpeg -f concat -safe 0 -i files.txt -c copy output.mp3\n```\n\n### Audio Manipulation\n\n```bash\n# Trim audio\nffmpeg -i input.mp3 -ss 00:00:10 -to 00:01:00 -c copy output.mp3\n\n# Normalize volume\nffmpeg -i input.mp3 -filter:a loudnorm output.mp3\n\n# Add silence\nffmpeg -i input.mp3 -af \"apad=pad_dur=2\" output.mp3\n```\n\n## Docker Support\n\nThis project can be run as a Docker container, which provides all the necessary dependencies pre-installed.\n\n### Building the Docker Image\n\n```bash\n# Build the image\ndocker build -t human-action .\n\n# Run the container with help output\ndocker run --rm human-action pipeline --help\n```\n\n### Using Docker Compose\n\nA docker-compose.yml file is provided for easier management:\n\n```bash\n# Start the container\ndocker-compose up -d\n\n# Run a command\ndocker-compose exec human-action pipeline --help\n\n# Process a PDF file\ndocker-compose exec human-action pipeline process data/1-pdf/your-file.pdf\n```\n\n### Local Container Testing\n\nYou can test the container locally with the provided script:\n\n```bash\n# Make the script executable\nchmod +x scripts/test-container.sh\n\n# Run the test\n./scripts/test-container.sh\n```\n\n## CI/CD with GitHub Actions\n\nThis project uses GitHub Actions for continuous integration and delivery:\n\n1. **Run Tests**: Runs the test suite on every push and pull request\n2. **Docker Build and Push**: Builds, tests, and publishes the Docker image to GitHub Container Registry\n3. **Security Scan**: Checks the Docker image for vulnerabilities using Trivy\n\n### Available Workflows\n\n- `.github/workflows/test.yml`: Runs the unit and integration tests\n- `.github/workflows/docker-build.yml`: Builds and pushes the Docker image\n- `.github/workflows/security-scan.yml`: Scans the Docker image for vulnerabilities\n\n### Using the Published Image\n\nOnce the workflows have run, you can use the published image from GitHub Container Registry:\n\n```bash\n# Pull the image\ndocker pull ghcr.io/YOUR_USERNAME/human-action:latest\n\n# Run the container\ndocker run --rm ghcr.io/YOUR_USERNAME/human-action:latest pipeline --help\n```","src/content/projects/human-action.md",[146,147,148],"data/screenshots/Screenshot_20250407_023826.png","data/screenshots/Screenshot_20250406_225133.png","data/screenshots/Screenshot_20250406_225924.png","3228bfa5c09900da",{"html":151,"metadata":152},"\u003Ch1 id=\"lidské-jednání-project--projekt-lidské-jednání\">Lidské Jednání Project / Projekt Lidské Jednání\u003C/h1>\n\u003Ch2 id=\"overview--přehled\">Overview / Přehled\u003C/h2>\n\u003Cp>Tento projekt zpracovává český překlad knihy “Human Action” (Lidské Jednání) z formátu PDF do optimalizovaných zvukových souborů prostřednictvím série kroků zpracování. Kódová základna obsahuje několik modulů, které zpracovávají různé aspekty zpracovatelského řetězce.\u003C/p>\n\u003Cp>This project processes the Czech translation of the book “Human Action” (Lidské Jednání) from PDF format into optimized audio files through a series of processing steps. The codebase includes several modules that handle different aspects of the processing pipeline.\u003C/p>\n\u003Ch2 id=\"stav\">STAV\u003C/h2>\n\u003Cul>\n\u003Cli>Textová data připravena: \u003Ca href=\"./data/4-markdown-chunks-optimized\">4-markdown-chunks-optimized\u003C/a>\u003C/li>\n\u003Cli>Vylepšování obsahu pro Elevenlabs API:\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;data/screenshots/Screenshot_20250407_023826.png&#x22;,&#x22;alt&#x22;:&#x22;Screenshot&#x22;,&#x22;index&#x22;:0}\">\u003C/li>\n\u003Cli>TODO: dokončit generování všech kapitol\n\u003Cul>\n\u003Cli>\u003Ccode>python audio_chunk_generator.py data/4-markdown-chunks-optimized/chapter_XX-OPTIMIZED.md\u003C/code> (ElevenLabs)\u003C/li>\n\u003Cli>nebo \u003Ccode>python espeak_audio_chunk_generator.py data/4-markdown-chunks-optimized/chapter_XX-OPTIMIZED.md\u003C/code> (espeak-ng)\u003C/li>\n\u003Cli>nebo hromadně \u003Ccode>./generate_espeak_audio.sh\u003C/code> (zpracuje všechny zbývající soubory pomocí espeak-ng)\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Regularly publishing to \u003Ca href=\"https://youtube.com/playlist?list=PLaWOvDBjg6WiUcQm-yEP1RskMfPeWMKTL\">youtube\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"automatizace-celé-pipeline-od-pdf-k-publikaci-audioknihy-na-jedno-tlačítko\">Automatizace celé pipeline (od PDF k publikaci audioknihy) na jedno tlačítko\u003C/h2>\n\u003Cul>\n\u003Cli>tohle je cíl, ale protože většina kroků pipeline už proběhla neautomatizovaně, bude to předmětem optimalizace kódu před zpracováním následujícího titulu\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"setup--nastavení\">Setup / Nastavení\u003C/h2>\n\u003Ch3 id=\"requirements--požadavky\">Requirements / Požadavky\u003C/h3>\n\u003Cul>\n\u003Cli>Python 3.8+\u003C/li>\n\u003Cli>ffmpeg (for audio manipulation)\u003C/li>\n\u003Cli>espeak-ng (for open-source TTS alternative)\u003C/li>\n\u003Cli>API keys for:\n\u003Cul>\n\u003Cli>Anthropic Claude API (text optimization)\u003C/li>\n\u003Cli>ElevenLabs API (text-to-speech)\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"installation--instalace\">Installation / Instalace\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Clone the repository / Klonování repozitáře\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> clone\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> https://github.com/sparesparrow/human-action.git\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">cd\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> human-action\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Create and activate virtual environment / Vytvoření a aktivace virtuálního prostředí\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">python3\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -m\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> venv\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> .venv\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">source\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> .venv/bin/activate\u003C/span>\u003Cspan style=\"color:#6A737D\">  # On Windows: .venv\\Scripts\\activate\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Install dependencies / Instalace závislostí\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">pip\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -r\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> requirements.txt\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Install system dependencies (Ubuntu/Debian)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">sudo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> apt-get\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ffmpeg\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> espeak-ng\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Or on macOS\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">brew\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ffmpeg\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> espeak-ng\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"environment-setup--nastavení-prostředí\">Environment Setup / Nastavení prostředí\u003C/h3>\n\u003Cp>Create a \u003Ccode>.env\u003C/code> file in the root directory with your API keys:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>ANTHROPIC_API_KEY=your_anthropic_api_key\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>ELEVENLABS_API_KEY=your_elevenlabs_api_key\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"processing-pipeline--postup-zpracování\">Processing Pipeline / Postup zpracování\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"mermaid\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">graph TD\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    A[PDF Files] -->|pdf_extractor.py| B[Markdown Chapters]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    B -->|chunker_splitter.py| C[Markdown Chunks]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    C -->|text_optimizer.py| D[Optimized Markdown Chunks]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    D -->|audio_chunk_generator.py| E[Audio Chunks]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    D -->|espeak_audio_chunk_generator.py| E2[Espeak Audio Chunks]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    E -->|audio_concatenator.py| F[Audio Chapters]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    E2 -->|audio_concatenator.py| F\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"directory-structure--adresářová-struktura\">Directory Structure / Adresářová struktura\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"./data/1-pdf\">1-pdf\u003C/a>: Source PDF files / Zdrojové PDF soubory\u003C/li>\n\u003Cli>\u003Ca href=\"./data/2-markdown-chapters\">2-markdown-chapters\u003C/a>: Extracted markdown chapters / Extrahované markdown kapitoly\u003C/li>\n\u003Cli>\u003Ca href=\"./data/3-markdown-chunks\">3-markdown-chunks\u003C/a>: Split markdown files / Rozdělené markdown soubory\u003C/li>\n\u003Cli>\u003Ca href=\"./data/4-markdown-chunks-optimized\">4-markdown-chunks-optimized\u003C/a>: Optimized markdown segments / Optimalizované markdown segmenty\u003C/li>\n\u003Cli>\u003Ca href=\"./data/5-audio-chunks\">5-audio-chunks\u003C/a>: Audio files generated using ElevenLabs / Zvukové soubory vygenerované pomocí ElevenLabs\u003C/li>\n\u003Cli>\u003Ca href=\"./data/5-audio-chunks-espeak\">5-audio-chunks-espeak\u003C/a>: Audio files generated using espeak-ng / Zvukové soubory vygenerované pomocí espeak-ng\u003C/li>\n\u003Cli>\u003Ca href=\"./data/6-audio-chapters\">6-audio-chapters\u003C/a>: Concatenated audio files into complete chapters / Spojené zvukové soubory do ucelených kapitol\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"modules--moduly\">Modules / Moduly\u003C/h2>\n\u003Ch3 id=\"1-pdf-extractor-pdf_extractorpy\">1. PDF Extractor (\u003Ccode>pdf_extractor.py\u003C/code>)\u003C/h3>\n\u003Cp>Extracts text from PDF files and creates markdown chapter files.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Input:\u003C/strong> PDF file(s) from \u003Ccode>data/1-pdf\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Output:\u003C/strong> Markdown chapter files in \u003Ccode>data/2-markdown-chapters\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"2-chunker-splitter-chunker_splitterpy\">2. Chunker Splitter (\u003Ccode>chunker_splitter.py\u003C/code>)\u003C/h3>\n\u003Cp>Splits markdown chapter files into smaller segments for easier processing.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Input:\u003C/strong> Markdown chapter files from \u003Ccode>data/2-markdown-chapters\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Output:\u003C/strong> Markdown chunks in \u003Ccode>data/3-markdown-chunks\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Chunk size:\u003C/strong> Maximum 5,000 characters per segment\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"3-text-optimizer-text_optimizerpy\">3. Text Optimizer (\u003Ccode>text_optimizer.py\u003C/code>)\u003C/h3>\n\u003Cp>Optimizes markdown chunks for speech synthesis using the Anthropic API.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Input:\u003C/strong> Markdown chunks from \u003Ccode>data/3-markdown-chunks\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Output:\u003C/strong> Optimized markdown chunks in \u003Ccode>data/4-markdown-chunks-optimized\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Optimization:\u003C/strong> Removes references, footnotes, page numbers; joins hyphenated words at line breaks; fixes formatting\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"4a-audio-chunk-generator-audio_chunk_generatorpy\">4a. Audio Chunk Generator (\u003Ccode>audio_chunk_generator.py\u003C/code>)\u003C/h3>\n\u003Cp>Converts text files to audio using the ElevenLabs API.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Input:\u003C/strong> Optimized markdown files from \u003Ccode>data/4-markdown-chunks-optimized\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Output:\u003C/strong> Audio files in \u003Ccode>data/5-audio-chunks\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Postprocessing:\u003C/strong> After processing, input files are marked with the prefix “AUDIO_GENERATED-” to indicate they have been converted to audio\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"4b-espeak-audio-chunk-generator-espeak_audio_chunk_generatorpy\">4b. Espeak Audio Chunk Generator (\u003Ccode>espeak_audio_chunk_generator.py\u003C/code>)\u003C/h3>\n\u003Cp>Alternative converter using the open-source espeak-ng TTS engine.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Input:\u003C/strong> Optimized markdown files from \u003Ccode>data/4-markdown-chunks-optimized\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Output:\u003C/strong> Audio files in \u003Ccode>data/5-audio-chunks-espeak\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Features:\u003C/strong> Free and open-source, works offline, supports Czech language\u003C/li>\n\u003Cli>\u003Cstrong>Note:\u003C/strong> Lower audio quality than ElevenLabs but useful for prototyping and development\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"5-audio-concatenator-audio_concatenatorpy\">5. Audio Concatenator (\u003Ccode>audio_concatenator.py\u003C/code>)\u003C/h3>\n\u003Cp>Concatenates multiple audio chunks into complete chapter audio files.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Input:\u003C/strong> Audio chunks from \u003Ccode>data/5-audio-chunks\u003C/code> or \u003Ccode>data/5-audio-chunks-espeak\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Output:\u003C/strong> Complete chapter audio files in \u003Ccode>data/6-audio-chapters\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"testing--testování\">Testing / Testování\u003C/h2>\n\u003Cp>The project includes a comprehensive test suite to validate the functionality of all pipeline components.\u003C/p>\n\u003Ch3 id=\"running-tests\">Running Tests\u003C/h3>\n\u003Cp>You can run tests using the provided script:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Run all tests\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">./run_tests.py\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Run only unit tests\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">./run_tests.py\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --unit\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Run only integration tests\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">./run_tests.py\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --integration\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Run with verbose output\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">./run_tests.py\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -v\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Or directly using pytest:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Install pytest if not already installed\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">pip\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> pytest\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Run all tests\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">pytest\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> tests/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Run a specific test file\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">pytest\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> tests/unit/test_pdf_extractor.py\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"test-structure\">Test Structure\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Unit Tests:\u003C/strong> Individual component tests in \u003Ccode>tests/unit/\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Integration Tests:\u003C/strong> End-to-end pipeline tests in \u003Ccode>tests/integration/\u003C/code>\u003C/li>\n\u003Cli>\u003Cstrong>Test Fixtures:\u003C/strong> Sample data for testing in \u003Ccode>tests/fixtures/\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"cost-saving-measures\">Cost-Saving Measures\u003C/h3>\n\u003Cp>The tests avoid using APIs that incur costs:\u003C/p>\n\u003Cul>\n\u003Cli>Uses \u003Ccode>espeak\u003C/code> instead of ElevenLabs for audio synthesis\u003C/li>\n\u003Cli>Skips testing the text optimization that would use Anthropic API\u003C/li>\n\u003C/ul>\n\u003Cp>See \u003Ccode>tests/README.md\u003C/code> for more details on the testing strategy.\u003C/p>\n\u003Ch2 id=\"batch-processing--hromadné-zpracování\">Batch Processing / Hromadné zpracování\u003C/h2>\n\u003Cp>To process all remaining files using espeak-ng, run:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">./generate_espeak_audio.sh\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This will:\u003C/p>\n\u003Col>\n\u003Cli>Process all remaining markdown files that haven’t been converted to audio yet\u003C/li>\n\u003Cli>Save the generated audio files to \u003Ccode>data/5-audio-chunks-espeak\u003C/code>\u003C/li>\n\u003Cli>Track progress in \u003Ccode>espeak_progress.json\u003C/code>\u003C/li>\n\u003Cli>Log detailed information to \u003Ccode>espeak_generation.log\u003C/code>\u003C/li>\n\u003C/ol>\n\u003Cp>You can customize the processing with these parameters:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Process with different voice and rate\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">./generate_espeak_audio.sh\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -v\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> cs\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -r\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 160\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -p\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 55\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Process only a limited number of files\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">./generate_espeak_audio.sh\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --max-files\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 5\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># See all available options\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">./generate_espeak_audio.sh\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --help\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"text-to-speech-formatting--formátování-textu-pro-syntézu-řeči\">Text-to-Speech Formatting / Formátování textu pro syntézu řeči\u003C/h2>\n\u003Cp>For better control over speech synthesis in ElevenLabs, you can use these special formatting tags:\u003C/p>\n\u003Ch3 id=\"pauses--pauzy\">Pauses / Pauzy\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"markdown\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;break time=\"1s\" />     &#x3C;!-- 1 second pause -->\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;break time=\"500ms\" />  &#x3C;!-- 500 millisecond pause -->\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;data/screenshots/Screenshot_20250406_225133.png&#x22;,&#x22;alt&#x22;:&#x22;Screenshot&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Ch3 id=\"voice-adjustments--úpravy-hlasu\">Voice Adjustments / Úpravy hlasu\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>&#x3C;prosody rate=\"slow\" pitch=\"+20%\">Text with higher pitch and slower rate&#x3C;/prosody>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>&#x3C;emphasis level=\"strong\">Strongly emphasized text&#x3C;/emphasis>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"greek-letters-and-variables--řecká-písmena-a-proměnné\">Greek Letters and Variables / Řecká písmena a proměnné\u003C/h3>\n\u003Cp>For Greek letters and variables, use plain text pronunciation:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>\"alfa účinku\" instead of \"α účinku\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\"pé jedna větší než pé\" instead of \"p₁ > p\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"using-llms-for-enhancing-voice-synthesis-generated-by-elevenlabs\">Using LLMs for enhancing voice synthesis generated by Elevenlabs\u003C/h2>\n\u003Cul>\n\u003Cli>Use and improve [Cursor rules]:\n\u003Cul>\n\u003Cli>\u003Ca href=\".cursor/rules/elevenlabs-content-structuring.mdc\">content-structuring\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\".cursor/rules/elevenlabs-czech-preprocessing.mdc\">czech-preprocessing\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\".cursor/rules/elevenlabs-economic-terminology.mdc\">economic-terminology\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\".cursor/rules/elevenlabs-narrative-flow-optimization.mdc\">narrative-flow-optimization\u003C/a>\n\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;data/screenshots/Screenshot_20250406_225924.png&#x22;,&#x22;alt&#x22;:&#x22;Screenshot&#x22;,&#x22;index&#x22;:0}\">\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"ffmpeg-commands-for-audio-manipulation--ffmpeg-příkazy-pro-manipulaci-s-audio\">FFmpeg Commands for Audio Manipulation / FFmpeg příkazy pro manipulaci s audio\u003C/h2>\n\u003Cp>The \u003Ccode>audio_concatenator.py\u003C/code> module uses ffmpeg for audio concatenation. Here are some useful ffmpeg commands:\u003C/p>\n\u003Ch3 id=\"concatenating-multiple-audio-files\">Concatenating Multiple Audio Files\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Using a file list\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">ffmpeg\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -f\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> concat\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -safe\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -i\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> files.txt\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -c\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> copy\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> output.mp3\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"audio-manipulation\">Audio Manipulation\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Trim audio\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">ffmpeg\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -i\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> input.mp3\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -ss\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 00:00:10\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -to\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 00:01:00\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -c\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> copy\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> output.mp3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Normalize volume\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">ffmpeg\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -i\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> input.mp3\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -filter:a\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> loudnorm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> output.mp3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Add silence\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">ffmpeg\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -i\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> input.mp3\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -af\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"apad=pad_dur=2\"\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> output.mp3\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"docker-support\">Docker Support\u003C/h2>\n\u003Cp>This project can be run as a Docker container, which provides all the necessary dependencies pre-installed.\u003C/p>\n\u003Ch3 id=\"building-the-docker-image\">Building the Docker Image\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Build the image\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">docker\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> build\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -t\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> human-action\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> .\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Run the container with help output\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">docker\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> run\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --rm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> human-action\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> pipeline\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --help\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"using-docker-compose\">Using Docker Compose\u003C/h3>\n\u003Cp>A docker-compose.yml file is provided for easier management:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Start the container\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">docker-compose\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> up\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -d\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Run a command\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">docker-compose\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> exec\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> human-action\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> pipeline\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --help\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Process a PDF file\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">docker-compose\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> exec\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> human-action\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> pipeline\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> process\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> data/1-pdf/your-file.pdf\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"local-container-testing\">Local Container Testing\u003C/h3>\n\u003Cp>You can test the container locally with the provided script:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Make the script executable\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">chmod\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> +x\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> scripts/test-container.sh\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Run the test\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">./scripts/test-container.sh\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"cicd-with-github-actions\">CI/CD with GitHub Actions\u003C/h2>\n\u003Cp>This project uses GitHub Actions for continuous integration and delivery:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Run Tests\u003C/strong>: Runs the test suite on every push and pull request\u003C/li>\n\u003Cli>\u003Cstrong>Docker Build and Push\u003C/strong>: Builds, tests, and publishes the Docker image to GitHub Container Registry\u003C/li>\n\u003Cli>\u003Cstrong>Security Scan\u003C/strong>: Checks the Docker image for vulnerabilities using Trivy\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"available-workflows\">Available Workflows\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Ccode>.github/workflows/test.yml\u003C/code>: Runs the unit and integration tests\u003C/li>\n\u003Cli>\u003Ccode>.github/workflows/docker-build.yml\u003C/code>: Builds and pushes the Docker image\u003C/li>\n\u003Cli>\u003Ccode>.github/workflows/security-scan.yml\u003C/code>: Scans the Docker image for vulnerabilities\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"using-the-published-image\">Using the Published Image\u003C/h3>\n\u003Cp>Once the workflows have run, you can use the published image from GitHub Container Registry:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Pull the image\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">docker\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> pull\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ghcr.io/YOUR_USERNAME/human-action:latest\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Run the container\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">docker\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> run\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --rm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ghcr.io/YOUR_USERNAME/human-action:latest\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> pipeline\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --help\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":153,"localImagePaths":261,"remoteImagePaths":262,"frontmatter":263,"imagePaths":264},[154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,209,212,215,218,221,224,227,230,233,236,239,242,243,246,249,252,255,258],{"depth":25,"slug":155,"text":156},"lidské-jednání-project--projekt-lidské-jednání","Lidské Jednání Project / Projekt Lidské Jednání",{"depth":28,"slug":158,"text":159},"overview--přehled","Overview / Přehled",{"depth":28,"slug":161,"text":162},"stav","STAV",{"depth":28,"slug":164,"text":165},"automatizace-celé-pipeline-od-pdf-k-publikaci-audioknihy-na-jedno-tlačítko","Automatizace celé pipeline (od PDF k publikaci audioknihy) na jedno tlačítko",{"depth":28,"slug":167,"text":168},"setup--nastavení","Setup / Nastavení",{"depth":38,"slug":170,"text":171},"requirements--požadavky","Requirements / Požadavky",{"depth":38,"slug":173,"text":174},"installation--instalace","Installation / Instalace",{"depth":38,"slug":176,"text":177},"environment-setup--nastavení-prostředí","Environment Setup / Nastavení prostředí",{"depth":28,"slug":179,"text":180},"processing-pipeline--postup-zpracování","Processing Pipeline / Postup zpracování",{"depth":28,"slug":182,"text":183},"directory-structure--adresářová-struktura","Directory Structure / Adresářová struktura",{"depth":28,"slug":185,"text":186},"modules--moduly","Modules / Moduly",{"depth":38,"slug":188,"text":189},"1-pdf-extractor-pdf_extractorpy","1. PDF Extractor (pdf_extractor.py)",{"depth":38,"slug":191,"text":192},"2-chunker-splitter-chunker_splitterpy","2. Chunker Splitter (chunker_splitter.py)",{"depth":38,"slug":194,"text":195},"3-text-optimizer-text_optimizerpy","3. Text Optimizer (text_optimizer.py)",{"depth":38,"slug":197,"text":198},"4a-audio-chunk-generator-audio_chunk_generatorpy","4a. Audio Chunk Generator (audio_chunk_generator.py)",{"depth":38,"slug":200,"text":201},"4b-espeak-audio-chunk-generator-espeak_audio_chunk_generatorpy","4b. Espeak Audio Chunk Generator (espeak_audio_chunk_generator.py)",{"depth":38,"slug":203,"text":204},"5-audio-concatenator-audio_concatenatorpy","5. Audio Concatenator (audio_concatenator.py)",{"depth":28,"slug":206,"text":207},"testing--testování","Testing / Testování",{"depth":38,"slug":124,"text":125},{"depth":38,"slug":210,"text":211},"test-structure","Test Structure",{"depth":38,"slug":213,"text":214},"cost-saving-measures","Cost-Saving Measures",{"depth":28,"slug":216,"text":217},"batch-processing--hromadné-zpracování","Batch Processing / Hromadné zpracování",{"depth":28,"slug":219,"text":220},"text-to-speech-formatting--formátování-textu-pro-syntézu-řeči","Text-to-Speech Formatting / Formátování textu pro syntézu řeči",{"depth":38,"slug":222,"text":223},"pauses--pauzy","Pauses / Pauzy",{"depth":38,"slug":225,"text":226},"voice-adjustments--úpravy-hlasu","Voice Adjustments / Úpravy hlasu",{"depth":38,"slug":228,"text":229},"greek-letters-and-variables--řecká-písmena-a-proměnné","Greek Letters and Variables / Řecká písmena a proměnné",{"depth":28,"slug":231,"text":232},"using-llms-for-enhancing-voice-synthesis-generated-by-elevenlabs","Using LLMs for enhancing voice synthesis generated by Elevenlabs",{"depth":28,"slug":234,"text":235},"ffmpeg-commands-for-audio-manipulation--ffmpeg-příkazy-pro-manipulaci-s-audio","FFmpeg Commands for Audio Manipulation / FFmpeg příkazy pro manipulaci s audio",{"depth":38,"slug":237,"text":238},"concatenating-multiple-audio-files","Concatenating Multiple Audio Files",{"depth":38,"slug":240,"text":241},"audio-manipulation","Audio Manipulation",{"depth":28,"slug":127,"text":128},{"depth":38,"slug":244,"text":245},"building-the-docker-image","Building the Docker Image",{"depth":38,"slug":247,"text":248},"using-docker-compose","Using Docker Compose",{"depth":38,"slug":250,"text":251},"local-container-testing","Local Container Testing",{"depth":28,"slug":253,"text":254},"cicd-with-github-actions","CI/CD with GitHub Actions",{"depth":38,"slug":256,"text":257},"available-workflows","Available Workflows",{"depth":38,"slug":259,"text":260},"using-the-published-image","Using the Published Image",[146,147,148],[],{"title":137,"description":140,"repo_url":141,"pubDate":65},[146,147,148],"human-action.md","mcp-prompts",{"id":266,"data":268,"body":272,"filePath":273,"digest":274,"rendered":275,"legacyId":413},{"title":266,"description":269,"repo_url":270,"pubDate":271},"Documentation for the mcp-prompts project.","https://github.com/sparesparrow/mcp-prompts.git",["Date","2025-07-30T00:00:00.000Z"],"# MCP Prompts Server · `@sparesparrow/mcp-prompts`\n\n[![CI](https://github.com/sparesparrow/mcp-prompts/actions/workflows/ci.yml/badge.svg)](../../actions)\n[![npm](https://img.shields.io/npm/v/@sparesparrow/mcp-prompts)](https://www.npmjs.com/package/@sparesparrow/mcp-prompts)\n[![Docker Pulls](https://img.shields.io/docker/pulls/sparesparrow/mcp-prompts)](https://hub.docker.com/r/sparesparrow/mcp-prompts)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n> **MCP Prompts Server** is a robust, extensible server for managing, versioning, and serving prompts and templates for LLM applications, built on the [Model Context Protocol (MCP)](https://modelcontextprotocol.io/specification/draft). It is the canonical TypeScript implementation and reference for prompt management in the MCP ecosystem.\n\n---\n\n## Table of Contents\n- [Why MCP Prompts?](#why-mcp-prompts)\n- [Features](#features)\n- [Quick Start](#quick-start)\n- [Scripts & CLI Reference](#scripts--cli-reference)\n- [MCP Features & Architecture](#mcp-features--architecture)\n- [MCP TypeScript SDK Role](#mcp-typescript-sdk-role)\n- [Alternative Approaches](#alternative-approaches)\n- [Community Packages](#community-packages)\n- [End-to-End Usage: Official MCP TypeScript SDK, PostgreSQL, Inspector, and Proxy](#end-to-end-usage-official-mcp-typescript-sdk-postgresql-inspector-and-proxy)\n- [Integration with Other MCP Servers](#integration-with-other-mcp-servers)\n- [Contributing](#contributing)\n- [License](#license)\n- [Support](#support)\n- [🛠️ Příklady konfigurace MCP klienta a serveru (`mcp.json`, `.env`)](#️-příklady-konfigurace-mcp-klienta-a-serveru-mcpjson-env)\n- [Hexagonální architektura v MCP-Prompts](#hexagonální-architektura-v-mcp-prompts)\n- [Architecture: Hexagonal (Ports & Adapters)](#architecture-hexagonal-ports--adapters)\n- [MCP Prompts Monorepo Build Setup](#mcp-prompts-monorepo-build-setup)\n- [TypeScript Monorepo Best Practices](#typescript-monorepo-best-practices)\n- [Troubleshooting](#troubleshooting)\n- [References](#references)\n\n---\n\n## Why MCP Prompts?\n\nPrompt chaos is real: teams lose track of prompt versions, struggle to test changes, and risk leaking sensitive instructions. **MCP Prompts** solves this by providing:\n\n- **Centralized, versioned prompt storage**\n- **Robust API for CRUD, search, and template application**\n- **Seamless integration with the broader MCP ecosystem**\n- **Extensible adapters for file, memory, and database backends**\n- **OpenAPI documentation and strong type safety**\n\n---\n\n## Features\n\n- **Full MCP Prompt API**: Create, read, update, delete, list, and apply prompts via MCP tools and HTTP endpoints\n- **Bulk Operations**: Batch import/export, bulk update, and catalog management\n- **Versioning**: Track prompt history, revert, and audit changes\n- **Template System**: Apply variables to prompts, validate required arguments\n- **Multiple Storage Backends**: File, in-memory, PostgreSQL, and pluggable adapters\n- **OpenAPI & Type Safety**: Auto-generated OpenAPI docs and strict TypeScript types\n- **Rate Limiting & Security**: Built-in rate limiting, CORS, and API key support\n- **Health Checks & Metrics**: `/health` endpoint, usage metrics, and audit logs\n- **Docker & Compose Support**: Production-ready images and multi-service orchestration\n- **MCP Ecosystem Integration**: Works with Filesystem, Memory, GitHub, and other MCP servers\n- **Extensible**: Add new adapters, tools, or integrations with minimal code\n- **ElevenLabs Integration**: Optional audio synthesis for prompt summaries\n- **Atomic File Writes**: All prompt and index files are written atomically (temp file + rename) to prevent corruption.\n- **File Locking**: Uses proper-lockfile to prevent concurrent write corruption.\n- **Schema Validation**: All prompt files are validated with Zod on add/update and at startup.\n- **Indexing**: Maintains an index.json for fast prompt listing and metadata lookup.\n- **Robustness Tests**: Includes tests for atomicity, locking, and schema validation in the file adapter.\n\n---\n\n## Quick Start\n\n### 1. Run with NPX (Recommended for Most Users)\n\n```bash\nnpx -y @sparesparrow/mcp-prompts\n```\n\n### 2. Run with Docker\n\n**File storage:**\n```bash\ndocker run -d --name mcp-server -p 3003:3003 -v $(pwd)/data:/app/data ghcr.io/sparesparrow/mcp-prompts:latest\n```\n\n**Postgres storage:**\n```bash\ndocker run -d --name mcp-server -p 3003:3003 -v $(pwd)/data:/app/data \\\n  -e \"STORAGE_TYPE=postgres\" -e \"POSTGRES_URL=your_connection_string\" \\\n  ghcr.io/sparesparrow/mcp-prompts:latest\n```\n\n**Docker Compose (multi-server):**\n```bash\ndocker-compose -f docker-compose.yml -f docker-compose.extended.yml up -d\n```\n\n### 3. Build from Source\n\n```bash\ngit clone https://github.com/sparesparrow/mcp-prompts.git\ncd mcp-prompts\nnpm install\nnpm run build\nnpm start\n```\n\n### 4. Health Check\n\n```bash\ncurl http://localhost:3003/health\n```\n\n---\n\n## Scripts & CLI Reference\n\nAll scripts are in the `scripts/` directory. Key scripts include:\n\n| Script                                 | Description                                                      |\n|----------------------------------------|------------------------------------------------------------------|\n| `test-npm-mcp-prompts.sh`              | Test MCP Prompts via npx and MCP Inspector                       |\n| `test-docker-mcp-prompts.sh`           | Test official Docker image and MCP Inspector                     |\n| `test-docker-compose-mcp-prompts.sh`   | Test Docker Compose environment with MCP Inspector               |\n| `extract-catalog.sh`                   | Extract and validate prompt catalog                              |\n| `extract-contracts.sh`                 | Extract and validate API contracts                               |\n| `extract-implementations.sh`           | Extract implementation details for documentation                 |\n| `setup-claude-desktop.sh`              | Setup integration with Claude Desktop                            |\n| `build-and-push-docker.sh`             | Build and push Docker images                                     |\n| `run-tests.sh`                         | Run all unit and integration tests                               |\n| `release.sh`                           | Automated release and version bump script                        |\n| `publish.sh`                           | Publish package to npm                                          |\n\n**Usage:**\n```bash\n./scripts/\u003Cscript-name> --help\n```\n\n---\n\n## MCP Features & Architecture\n\nMCP Prompts implements the full [Model Context Protocol](https://modelcontextprotocol.io/specification/draft) prompt API:\n\n- **Prompts**: CRUD, list, search, and apply (with variable substitution)\n- **Resources**: Expose prompt data as MCP resources\n- **Tools**: Register prompt management tools (add, get, list, apply, delete)\n- **Bulk Operations**: Import/export, batch update\n- **Versioning**: Track and revert prompt changes\n- **Adapters**: File, memory, PostgreSQL, and pluggable custom adapters\n- **OpenAPI Docs**: `/api-docs` endpoint with live documentation\n- **Health & Metrics**: `/health` endpoint, audit logs, and usage stats\n- **Security**: API key, CORS, rate limiting, and RBAC (role-based access control)\n- **Extensibility**: Add new tools, adapters, or integrations via plugin pattern\n- **ElevenLabs Integration**: Optional audio synthesis for prompt summaries\n\n**Architecture Overview:**\n- **Core**: Prompt management, template engine, versioning\n- **Adapters**: Storage (file, memory, Postgres), external MCP servers\n- **API Layer**: MCP tools/resources, HTTP endpoints, OpenAPI docs\n- **Integrations**: ElevenLabs, Filesystem/Memory/GitHub MCP servers\n\n---\n\n## MCP TypeScript SDK Role\n\nMCP Prompts is built on the [@modelcontextprotocol/sdk](https://www.npmjs.com/package/@modelcontextprotocol/sdk), the canonical TypeScript implementation of the MCP specification. The SDK provides:\n\n- **Protocol Compliance**: Handles JSON-RPC, connection lifecycle, and capability negotiation\n- **Server/Client Abstractions**: Easy creation of MCP servers and clients\n- **Transport Support**: stdio, Streamable HTTP, and SSE\n- **Schema-Driven APIs**: Zod-based validation for all tool/resource definitions\n- **Extensibility**: Register new tools, resources, and prompts with minimal code\n\nBy using the SDK, MCP Prompts ensures full compatibility with the evolving MCP standard and can be easily extended or integrated with other MCP-based tools.\n\n---\n\n## Alternative Approaches\n\nDepending on your needs, you may consider:\n\n- **Other Language Implementations**: Use [mcp-prompts-rs](https://github.com/sparesparrow/mcp-prompts-rs) (Rust) for high-performance or embedded use cases\n- **Custom Adapters**: Implement your own storage or metadata adapters using the documented interfaces\n- **Direct Integration**: Use the MCP TypeScript SDK to build your own server or client for specialized workflows\n- **Community Servers**: Leverage other MCP servers (Filesystem, Memory, GitHub, etc.) for federated or distributed prompt management\n\n---\n\n## Community Packages\n\nRecommended packages for advanced use:\n\n- [`@sparesparrow/mcp-prompts-catalog`](https://www.npmjs.com/package/@sparesparrow/mcp-prompts-catalog): Curated prompt catalog for MCP\n- [`@sparesparrow/mcp-prompts-contracts`](https://www.npmjs.com/package/@sparesparrow/mcp-prompts-contracts): Shared TypeScript types and OpenAPI contracts\n- [`@modelcontextprotocol/server-postgres`](https://www.npmjs.com/package/@modelcontextprotocol/server-postgres): PostgreSQL storage adapter\n- [`@modelcontextprotocol/server-filesystem`](https://www.npmjs.com/package/@modelcontextprotocol/server-filesystem): Filesystem MCP server\n- [`@modelcontextprotocol/server-memory`](https://www.npmjs.com/package/@modelcontextprotocol/server-memory): In-memory MCP server\n- [`@modelcontextprotocol/server-github`](https://www.npmjs.com/package/@modelcontextprotocol/server-github): GitHub sync MCP server\n- [`@modelcontextprotocol/inspector`](https://www.npmjs.com/package/@modelcontextprotocol/inspector): Debugging and inspection tool for MCP servers\n\n---\n\n## End-to-End Usage: Official MCP TypeScript SDK, PostgreSQL, Inspector, and Proxy\n\nThis section provides a complete workflow for building, running, debugging, and exposing a custom MCP server using the official TypeScript SDK, PostgreSQL, MCP Inspector, and mcp-proxy. All commands and examples work on Linux, macOS, and Windows (including WSL).\n\n### 1. Install the Official TypeScript SDK and Dependencies\n\n```bash\nnpm install @modelcontextprotocol/sdk zod pg\n```\n- `@modelcontextprotocol/sdk` – Official MCP SDK (server, types, transports)\n- `zod` – Input and schema validation\n- `pg` – PostgreSQL driver\n\n---\n\n### 2. Example MCP Server with PostgreSQL\n\n```ts\n// src/server.ts\nimport { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\nimport { Pool } from \"pg\";\nimport { z } from \"zod\";\n\nconst db = new Pool({ connectionString: process.env.DATABASE_URL });\n\nconst server = new McpServer({\n  name: \"mcp-prompts-postgres\",\n  version: \"1.0.0\"\n});\n\n// Example tool: fetch a prompt from the database\nserver.registerTool(\n  \"getPromptFromDb\",\n  {\n    title: \"Get prompt from DB\",\n    description: \"Returns a prompt template stored in Postgres\",\n    inputSchema: { id: z.string() }\n  },\n  async ({ id }) => {\n    const { rows } = await db.query(\n      \"SELECT text FROM prompts WHERE id = $1\",\n      [id]\n    );\n    return {\n      content: [{ type: \"text\", text: rows[0]?.text ?? \"Not found\" }]\n    };\n  }\n);\n\n// Start the server using stdio transport\nawait server.connect(new StdioServerTransport());\n```\n\n---\n\n### 3. Local Environment with Docker Compose\n\n```yaml\n# docker-compose.yml\nversion: \"3.9\"\nservices:\n  postgres:\n    image: postgres:16\n    environment:\n      POSTGRES_DB: mcp\n      POSTGRES_USER: mcp\n      POSTGRES_PASSWORD: mcp\n    ports: [\"5432:5432\"]\n    volumes: [\"./pgdata:/var/lib/postgresql/data\"]\n\n  mcp-server:\n    build: .\n    command: node dist/server.js\n    environment:\n      DATABASE_URL: postgres://mcp:mcp@postgres:5432/mcp\n    depends_on: [postgres]\n```\n\n---\n\n### 4. Debugging with MCP Inspector\n\n1. Build your server:\n   ```bash\n   npx tsc\n   ```\n2. Start the Inspector with your server binary:\n   ```bash\n   npx @modelcontextprotocol/inspector node dist/server.js\n   ```\n   The Inspector UI will open at http://localhost:6274 and allows you to:\n   - Switch transport (stdio / http)\n   - Browse Resources/Prompts/Tools\n   - Send test requests and view logs\n\n---\n\n### 5. Exposing the Server Remotely with mcp-proxy\n\nIf you need to connect a client expecting SSE or Streamable HTTP to your stdio-based server, use mcp-proxy as a bridge:\n\n```bash\n# stdio → SSE bridge on port 8080\nnpx -y @modelcontextprotocol/proxy --stdio \"node dist/server.js\" --sse 8080\n```\n\nThis will expose your MCP server over SSE/HTTP for remote access.\n\n---\n\n## Integration with Other MCP Servers\n\nMCP Prompts can be used standalone or as part of a federated MCP ecosystem. Integration patterns include:\n\n### 1. **Client-Side Federation**\nConfigure multiple MCP servers in your host application (e.g., Claude Desktop, Cursor):\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-prompts\": { \"command\": \"npx\", \"args\": [\"-y\", \"@sparesparrow/mcp-prompts\"] },\n    \"filesystem\": { \"command\": \"npx\", \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/path/to/files\"] },\n    \"memory\": { \"command\": \"npx\", \"args\": [\"-y\", \"@modelcontextprotocol/server-memory\"] },\n    \"github\": { \"command\": \"npx\", \"args\": [\"-y\", \"@modelcontextprotocol/server-github\"] }\n  }\n}\n```\n\n### 2. **Server-Side Integration**\nMCP Prompts can connect to other MCP servers (Filesystem, Memory, GitHub) as storage or metadata backends via adapters. Use Docker Compose for orchestration:\n\n```yaml\nversion: '3.8'\nservices:\n  mcp-prompts:\n    image: ghcr.io/sparesparrow/mcp-prompts:latest\n    environment:\n      - STORAGE_TYPE=file\n      - PROMPTS_DIR=/app/prompts\n    volumes:\n      - ./prompts:/app/prompts\n    depends_on:\n      - filesystem-server\n      - memory-server\n      - github-server\n  filesystem-server:\n    image: ghcr.io/modelcontextprotocol/server-filesystem:latest\n    volumes:\n      - ./prompts:/prompts\n  memory-server:\n    image: ghcr.io/modelcontextprotocol/server-memory:latest\n    volumes:\n      - ./data:/data\n  github-server:\n    image: ghcr.io/modelcontextprotocol/server-github:latest\n    environment:\n      - GITHUB_PERSONAL_ACCESS_TOKEN=${GITHUB_TOKEN}\n```\n\n### 3. **Routing and Federation**\nMCP Prompts does not natively proxy or federate requests to other servers, but you can use API gateways, custom adapters, or orchestration tools to build federated workflows. See the [MCP Integration Guide](docs/06-mcp-integration.md) for advanced patterns.\n\n---\n\n## Contributing\n\nWe welcome contributions of all kinds! Please see [CONTRIBUTING.md](CONTRIBUTING.md) for guidelines, code style, and the PR process.\n\n---\n\n## License\n\nMIT License. See [LICENSE](LICENSE).\n\n---\n\n## Support\n\n- **Bugs & Issues:** [GitHub Issues](../../issues)\n- **Discussions:** [GitHub Discussions](../../discussions)\n- **Commercial Support:** [Sparrow AI & Tech](mailto:support@sparrowai.tech)\n\n---\n\n\u003Csub>Built with ❤️ by [@sparesparrow](https://github.com/sparesparrow) and the [community](https://github.com/sparesparrow/mcp-prompts/graphs/contributors)\u003C/sub>\n\n---\n\n## 🛠️ Příklady konfigurace MCP klienta a serveru (`mcp.json`, `.env`)\n\nMCP klienti (např. Cursor, Claude Desktop, VS Code, Amazon Q) podporují různé formáty konfiguračních souborů a způsoby spouštění MCP serveru. Níže najdete vzorové konfigurace pro všechny běžné scénáře.\n\n### 1. Formáty `mcp.json`\n\n#### a) Formát `mcpServers` (Cursor, Claude Desktop, Amazon Q)\n```json\n{\n  \"mcpServers\": {\n    \"mcp-prompts\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@sparesparrow/mcp-prompts\"],\n      \"env\": {\n        \"PROMPTS_DIR\": \"./my-prompts\",\n        \"STORAGE_TYPE\": \"postgres\"\n      },\n      \"timeout\": 30000\n    }\n  }\n}\n```\n\n#### b) Formát `servers` (VS Code, Hugging Face clients)\n```json\n{\n  \"servers\": [\n    {\n      \"name\": \"mcp-prompts\",\n      \"transport\": {\n        \"type\": \"stdio\",\n        \"command\": \"npx\",\n        \"args\": [\"-y\", \"@sparesparrow/mcp-prompts\"]\n      },\n      \"env\": {\n        \"PROMPTS_DIR\": \"./my-prompts\"\n      }\n    }\n  ]\n}\n```\n\n### 2. Konfigurace pro různá prostředí\n\n#### **Linux Host**\n```json\n{\n  \"mcpServers\": {\n    \"mcp-prompts\": {\n      \"command\": \"/usr/bin/node\",\n      \"args\": [\"/opt/mcp-prompts/dist/server.js\"],\n      \"env\": {\n        \"PROMPTS_DIR\": \"/home/user/prompts\",\n        \"STORAGE_TYPE\": \"file\",\n        \"NODE_ENV\": \"production\"\n      }\n    }\n  }\n}\n```\n\nAlternativně s wrapper scriptem:\n```json\n{\n  \"mcpServers\": {\n    \"mcp-prompts\": {\n      \"command\": \"./scripts/start-mcp-prompts.sh\"\n    }\n  }\n}\n```\n\n#### **Windows Host**\n```json\n{\n  \"mcpServers\": {\n    \"mcp-prompts\": {\n      \"command\": \"C:\\\\Program Files\\\\nodejs\\\\node.exe\",\n      \"args\": [\"C:\\\\mcp-prompts\\\\dist\\\\server.js\"],\n      \"env\": {\n        \"PROMPTS_DIR\": \"C:\\\\Users\\\\%USERNAME%\\\\Documents\\\\prompts\",\n        \"STORAGE_TYPE\": \"file\"\n      }\n    }\n  }\n}\n```\n\n#### **Docker Image**\n```json\n{\n  \"mcpServers\": {\n    \"mcp-prompts\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"-i\", \"--rm\",\n        \"-v\", \"${PWD}/prompts:/app/prompts\",\n        \"-e\", \"PROMPTS_DIR=/app/prompts\",\n        \"-e\", \"POSTGRES_URL\",\n        \"sparesparrow/mcp-prompts:latest\"\n      ],\n      \"env\": {\n        \"POSTGRES_URL\": \"${POSTGRES_URL}\"\n      }\n    }\n  }\n}\n```\n\n#### **NPM Package (doporučený způsob)**\n```json\n{\n  \"mcpServers\": {\n    \"mcp-prompts\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\", \n        \"@sparesparrow/mcp-prompts\",\n        \"--source\", \"catalog:\",\n        \"--source\", \"file:./company-prompts\"\n      ],\n      \"env\": {\n        \"STORAGE_TYPE\": \"postgres\",\n        \"POSTGRES_URL\": \"${POSTGRES_URL}\",\n        \"LOG_LEVEL\": \"info\"\n      }\n    }\n  }\n}\n```\n\n### 3. Bezpečné proměnné prostředí (`.env` a VS Code style)\n\nDoporučujeme používat `.env` soubor nebo bezpečné prompty pro citlivé údaje:\n\n```env\nPOSTGRES_URL=postgres://user:password@localhost:5432/mcp_prompts\nPROMPTS_DIR=./prompts\nLOG_LEVEL=info\n```\n\nNebo v konfiguraci VS Code:\n```json\n{\n  \"inputs\": [\n    {\n      \"type\": \"promptString\",\n      \"id\": \"postgres-url\",\n      \"description\": \"PostgreSQL Connection URL\",\n      \"password\": true\n    },\n    {\n      \"type\": \"promptString\", \n      \"id\": \"prompts-dir\",\n      \"description\": \"Cesta k promptům\"\n    }\n  ]\n}\n```\n\n## Hexagonální architektura v MCP-Prompts\n\nProjekt `mcp-prompts` je navržen podle principů hexagonální architektury (architektura portů a adaptérů), která zajišťuje čisté oddělení doménové logiky od vnějších závislostí (např. úložiště, templating, transportní vrstvy). Tento přístup přináší:\n\n- **Lepší testovatelnost**: Doménová logika je izolovaná a snadno testovatelná bez závislosti na konkrétních implementacích adaptérů.\n- **Snadná rozšiřitelnost**: Nové typy úložišť, šablonovacích systémů nebo transportních vrstev lze přidávat bez zásahu do jádra aplikace.\n- **Udržovatelnost**: Jasné rozhraní mezi doménou a infrastrukturou usnadňuje refaktoring a vývoj.\n\n### Struktura projektu podle hexagonální architektury\n\n- `core/domain/` – Doménové entity a business logika (např. `prompt.entity.ts`)\n- `core/ports/` – Rozhraní (porty) pro interakci s doménou (např. `prompt.repository.ts`, `templating.port.ts`, `api.port.ts`)\n- `core/services/` – Doménové služby (např. `prompt.service.ts`)\n- `adapters/` – Implementace portů (adaptéry), např. `file-storage.adapter.ts`, `eta-templating.adapter.ts`\n- `transports/` – Transportní vrstvy (např. HTTP, MCP, SSE)\n- `index.ts` – Kompozice aplikace, propojení portů a adaptérů\n\n### Praktické příklady\n- Pro přidání nového úložiště stačí implementovat rozhraní `PromptRepository` a zaregistrovat adaptér.\n- Pro změnu templating systému stačí implementovat `TemplatingPort`.\n\n### Odkazy\n- [Oficiální MCP architektura](https://modelcontextprotocol.io/specification/2025-06-18/architecture)\n- [Hexagonal Architecture (Alistair Cockburn)](https://alistair.cockburn.us/hexagonal-architecture/)\n\n## Architecture: Hexagonal (Ports & Adapters)\n\nmcp-prompts is architected using the Hexagonal Architecture (Ports & Adapters) pattern. This design separates the core business logic from external systems (storage, APIs, UI) via well-defined interfaces (ports) and their implementations (adapters).\n\n**Key Components:**\n- **Core (Hexagon):** Pure business logic for prompt management, versioning, templating, and validation. No dependencies on frameworks or infrastructure.\n- **Ports (Interfaces):**\n  - **Primary Port:** `IPromptApplication` – defines the API for all use cases (add, get, list, apply, etc.).\n  - **Secondary Ports:**\n    - `IPromptRepository` – contract for data persistence (file, Postgres, etc.).\n    - `ITemplatingEngine` – contract for rendering templates.\n- **Adapters (Implementations):**\n  - **Primary/Driving:**\n    - `MCPAdapter` (MCP JSON-RPC stdio/SSE)\n    - `RestApiAdapter` (Express/HTTP, optional/future)\n  - **Secondary/Driven:**\n    - `FileStorageAdapter` (JSON files)\n    - `PostgresStorageAdapter` (PostgreSQL)\n    - `EtaTemplatingAdapter` (template rendering)\n\n**Benefits:**\n- Isolated, testable core logic\n- Easy to add new storage or API adapters\n- Stable, maintainable, and extensible foundation for the MCP ecosystem\n\n**Directory Structure Example:**\n```\nmcp-prompts/\n  core/\n    entities/\n    services/\n    ports/\n  adapters/\n    primary/\n      mcp/\n      rest/\n    secondary/\n      file/\n      postgres/\n      eta/\n  tests/\n    core/\n    adapters/\n```\n\n**Testing:**\n- Core logic is tested with in-memory/mock ports (no I/O required).\n- Adapters are tested with real dependencies (integration tests).\n\n**Integration:**\n- MCPAdapter uses `@modelcontextprotocol/sdk` to register tools/resources.\n- Compatible with MCP Inspector, mcp-cli, Claude Desktop, and other MCP clients.\n\n**References:**\n- [Hexagonal Architecture: Wikipedia](https://en.wikipedia.org/wiki/Hexagonal_architecture_(software))\n- [MCP Specification](https://modelcontextprotocol.io/specification/2025-06-18/architecture)\n- [DEV: Stop Losing Prompts – Build Your Own MCP Prompt Registry](https://dev.to/stevengonsalvez/stop-losing-prompts-build-your-own-mcp-prompt-registry-4fi1)\n\n## MCP Prompts Monorepo Build Setup\n\n## TypeScript Monorepo Best Practices\n\n- Each package has its own `tsconfig.json` extending a shared `tsconfig.options.json`.\n- The shared config enables ESM (`module: NodeNext`), strict type checking, and emits both `.js` and `.d.ts` files for all source files.\n- `emitDeclarationOnly` is **not** used, so both JavaScript and type declarations are available for downstream packages.\n- **Build order matters:**\n  1. Build `@mcp-prompts/core` first (it emits all types and JS for downstream packages).\n  2. Then build `@mcp-prompts/adapters-file` and `@mcp-prompts/adapters-memory`.\n  3. Then run `pnpm -r build` for the full monorepo.\n- The script `src/scripts/validate-prompts.ts` is excluded from the core build to avoid circular dependencies (it depends on adapters-file, which depends on core). If you need to build or run this script, do so separately after the main build.\n- All imports between packages use the built outputs (e.g., `@mcp-prompts/core/dist/interfaces.js`).\n\n## Troubleshooting\n\n- If you see errors about missing modules or types, ensure you have built `@mcp-prompts/core` first and that all `dist/` directories are up to date.\n- If you change the shared config or move files, clean all `dist/` directories and rebuild.\n\n## References\n- [Turborepo TypeScript Monorepo Guide](https://turborepo.com/docs/guides/tools/typescript)\n- [Separate tsconfig for builds](https://www.timsanteford.com/posts/streamlining-your-next-js-builds-with-a-separate-typescript-configuration/)","src/content/projects/mcp-prompts.md","190f8743783fbb32",{"html":276,"metadata":277},"\u003Ch1 id=\"mcp-prompts-server--sparesparrowmcp-prompts\">MCP Prompts Server · \u003Ccode>@sparesparrow/mcp-prompts\u003C/code>\u003C/h1>\n\u003Cp>\u003Ca href=\"../../actions\">\u003Cimg src=\"https://github.com/sparesparrow/mcp-prompts/actions/workflows/ci.yml/badge.svg\" alt=\"CI\">\u003C/a>\n\u003Ca href=\"https://www.npmjs.com/package/@sparesparrow/mcp-prompts\">\u003Cimg src=\"https://img.shields.io/npm/v/@sparesparrow/mcp-prompts\" alt=\"npm\">\u003C/a>\n\u003Ca href=\"https://hub.docker.com/r/sparesparrow/mcp-prompts\">\u003Cimg src=\"https://img.shields.io/docker/pulls/sparesparrow/mcp-prompts\" alt=\"Docker Pulls\">\u003C/a>\n\u003Ca href=\"https://opensource.org/licenses/MIT\">\u003Cimg src=\"https://img.shields.io/badge/License-MIT-yellow.svg\" alt=\"License: MIT\">\u003C/a>\u003C/p>\n\u003Cblockquote>\n\u003Cp>\u003Cstrong>MCP Prompts Server\u003C/strong> is a robust, extensible server for managing, versioning, and serving prompts and templates for LLM applications, built on the \u003Ca href=\"https://modelcontextprotocol.io/specification/draft\">Model Context Protocol (MCP)\u003C/a>. It is the canonical TypeScript implementation and reference for prompt management in the MCP ecosystem.\u003C/p>\n\u003C/blockquote>\n\u003Chr>\n\u003Ch2 id=\"table-of-contents\">Table of Contents\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#why-mcp-prompts\">Why MCP Prompts?\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#features\">Features\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#quick-start\">Quick Start\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#scripts--cli-reference\">Scripts &#x26; CLI Reference\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#mcp-features--architecture\">MCP Features &#x26; Architecture\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#mcp-typescript-sdk-role\">MCP TypeScript SDK Role\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#alternative-approaches\">Alternative Approaches\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#community-packages\">Community Packages\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#end-to-end-usage-official-mcp-typescript-sdk-postgresql-inspector-and-proxy\">End-to-End Usage: Official MCP TypeScript SDK, PostgreSQL, Inspector, and Proxy\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#integration-with-other-mcp-servers\">Integration with Other MCP Servers\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#contributing\">Contributing\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#license\">License\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#support\">Support\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%EF%B8%8F-p%C5%99%C3%ADklady-konfigurace-mcp-klienta-a-serveru-mcpjson-env\">🛠️ Příklady konfigurace MCP klienta a serveru (\u003Ccode>mcp.json\u003C/code>, \u003Ccode>.env\u003C/code>)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#hexagon%C3%A1ln%C3%AD-architektura-v-mcp-prompts\">Hexagonální architektura v MCP-Prompts\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#architecture-hexagonal-ports--adapters\">Architecture: Hexagonal (Ports &#x26; Adapters)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#mcp-prompts-monorepo-build-setup\">MCP Prompts Monorepo Build Setup\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#typescript-monorepo-best-practices\">TypeScript Monorepo Best Practices\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#troubleshooting\">Troubleshooting\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#references\">References\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"why-mcp-prompts\">Why MCP Prompts?\u003C/h2>\n\u003Cp>Prompt chaos is real: teams lose track of prompt versions, struggle to test changes, and risk leaking sensitive instructions. \u003Cstrong>MCP Prompts\u003C/strong> solves this by providing:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Centralized, versioned prompt storage\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>Robust API for CRUD, search, and template application\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>Seamless integration with the broader MCP ecosystem\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>Extensible adapters for file, memory, and database backends\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>OpenAPI documentation and strong type safety\u003C/strong>\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"features\">Features\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Full MCP Prompt API\u003C/strong>: Create, read, update, delete, list, and apply prompts via MCP tools and HTTP endpoints\u003C/li>\n\u003Cli>\u003Cstrong>Bulk Operations\u003C/strong>: Batch import/export, bulk update, and catalog management\u003C/li>\n\u003Cli>\u003Cstrong>Versioning\u003C/strong>: Track prompt history, revert, and audit changes\u003C/li>\n\u003Cli>\u003Cstrong>Template System\u003C/strong>: Apply variables to prompts, validate required arguments\u003C/li>\n\u003Cli>\u003Cstrong>Multiple Storage Backends\u003C/strong>: File, in-memory, PostgreSQL, and pluggable adapters\u003C/li>\n\u003Cli>\u003Cstrong>OpenAPI &#x26; Type Safety\u003C/strong>: Auto-generated OpenAPI docs and strict TypeScript types\u003C/li>\n\u003Cli>\u003Cstrong>Rate Limiting &#x26; Security\u003C/strong>: Built-in rate limiting, CORS, and API key support\u003C/li>\n\u003Cli>\u003Cstrong>Health Checks &#x26; Metrics\u003C/strong>: \u003Ccode>/health\u003C/code> endpoint, usage metrics, and audit logs\u003C/li>\n\u003Cli>\u003Cstrong>Docker &#x26; Compose Support\u003C/strong>: Production-ready images and multi-service orchestration\u003C/li>\n\u003Cli>\u003Cstrong>MCP Ecosystem Integration\u003C/strong>: Works with Filesystem, Memory, GitHub, and other MCP servers\u003C/li>\n\u003Cli>\u003Cstrong>Extensible\u003C/strong>: Add new adapters, tools, or integrations with minimal code\u003C/li>\n\u003Cli>\u003Cstrong>ElevenLabs Integration\u003C/strong>: Optional audio synthesis for prompt summaries\u003C/li>\n\u003Cli>\u003Cstrong>Atomic File Writes\u003C/strong>: All prompt and index files are written atomically (temp file + rename) to prevent corruption.\u003C/li>\n\u003Cli>\u003Cstrong>File Locking\u003C/strong>: Uses proper-lockfile to prevent concurrent write corruption.\u003C/li>\n\u003Cli>\u003Cstrong>Schema Validation\u003C/strong>: All prompt files are validated with Zod on add/update and at startup.\u003C/li>\n\u003Cli>\u003Cstrong>Indexing\u003C/strong>: Maintains an index.json for fast prompt listing and metadata lookup.\u003C/li>\n\u003Cli>\u003Cstrong>Robustness Tests\u003C/strong>: Includes tests for atomicity, locking, and schema validation in the file adapter.\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"quick-start\">Quick Start\u003C/h2>\n\u003Ch3 id=\"1-run-with-npx-recommended-for-most-users\">1. Run with NPX (Recommended for Most Users)\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npx\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -y\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> @sparesparrow/mcp-prompts\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"2-run-with-docker\">2. Run with Docker\u003C/h3>\n\u003Cp>\u003Cstrong>File storage:\u003C/strong>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">docker\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> run\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -d\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --name\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> mcp-server\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -p\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 3003:3003\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -v\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $(\u003C/span>\u003Cspan style=\"color:#79B8FF\">pwd\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/data:/app/data\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ghcr.io/sparesparrow/mcp-prompts:latest\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Postgres storage:\u003C/strong>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">docker\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> run\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -d\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --name\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> mcp-server\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -p\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 3003:3003\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -v\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $(\u003C/span>\u003Cspan style=\"color:#79B8FF\">pwd\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/data:/app/data\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  -e\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"STORAGE_TYPE=postgres\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -e\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"POSTGRES_URL=your_connection_string\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  ghcr.io/sparesparrow/mcp-prompts:latest\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Docker Compose (multi-server):\u003C/strong>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">docker-compose\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -f\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> docker-compose.yml\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -f\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> docker-compose.extended.yml\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> up\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -d\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"3-build-from-source\">3. Build from Source\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> clone\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> https://github.com/sparesparrow/mcp-prompts.git\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">cd\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> mcp-prompts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> run\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> build\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> start\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"4-health-check\">4. Health Check\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">curl\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> http://localhost:3003/health\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Ch2 id=\"scripts--cli-reference\">Scripts &#x26; CLI Reference\u003C/h2>\n\u003Cp>All scripts are in the \u003Ccode>scripts/\u003C/code> directory. Key scripts include:\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Script\u003C/th>\u003Cth>Description\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>\u003Ccode>test-npm-mcp-prompts.sh\u003C/code>\u003C/td>\u003Ctd>Test MCP Prompts via npx and MCP Inspector\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>test-docker-mcp-prompts.sh\u003C/code>\u003C/td>\u003Ctd>Test official Docker image and MCP Inspector\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>test-docker-compose-mcp-prompts.sh\u003C/code>\u003C/td>\u003Ctd>Test Docker Compose environment with MCP Inspector\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>extract-catalog.sh\u003C/code>\u003C/td>\u003Ctd>Extract and validate prompt catalog\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>extract-contracts.sh\u003C/code>\u003C/td>\u003Ctd>Extract and validate API contracts\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>extract-implementations.sh\u003C/code>\u003C/td>\u003Ctd>Extract implementation details for documentation\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>setup-claude-desktop.sh\u003C/code>\u003C/td>\u003Ctd>Setup integration with Claude Desktop\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>build-and-push-docker.sh\u003C/code>\u003C/td>\u003Ctd>Build and push Docker images\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>run-tests.sh\u003C/code>\u003C/td>\u003Ctd>Run all unit and integration tests\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>release.sh\u003C/code>\u003C/td>\u003Ctd>Automated release and version bump script\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>publish.sh\u003C/code>\u003C/td>\u003Ctd>Publish package to npm\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>\u003Cstrong>Usage:\u003C/strong>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">./scripts/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;script-name> \u003C/span>\u003Cspan style=\"color:#79B8FF\">--help\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Ch2 id=\"mcp-features--architecture\">MCP Features &#x26; Architecture\u003C/h2>\n\u003Cp>MCP Prompts implements the full \u003Ca href=\"https://modelcontextprotocol.io/specification/draft\">Model Context Protocol\u003C/a> prompt API:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Prompts\u003C/strong>: CRUD, list, search, and apply (with variable substitution)\u003C/li>\n\u003Cli>\u003Cstrong>Resources\u003C/strong>: Expose prompt data as MCP resources\u003C/li>\n\u003Cli>\u003Cstrong>Tools\u003C/strong>: Register prompt management tools (add, get, list, apply, delete)\u003C/li>\n\u003Cli>\u003Cstrong>Bulk Operations\u003C/strong>: Import/export, batch update\u003C/li>\n\u003Cli>\u003Cstrong>Versioning\u003C/strong>: Track and revert prompt changes\u003C/li>\n\u003Cli>\u003Cstrong>Adapters\u003C/strong>: File, memory, PostgreSQL, and pluggable custom adapters\u003C/li>\n\u003Cli>\u003Cstrong>OpenAPI Docs\u003C/strong>: \u003Ccode>/api-docs\u003C/code> endpoint with live documentation\u003C/li>\n\u003Cli>\u003Cstrong>Health &#x26; Metrics\u003C/strong>: \u003Ccode>/health\u003C/code> endpoint, audit logs, and usage stats\u003C/li>\n\u003Cli>\u003Cstrong>Security\u003C/strong>: API key, CORS, rate limiting, and RBAC (role-based access control)\u003C/li>\n\u003Cli>\u003Cstrong>Extensibility\u003C/strong>: Add new tools, adapters, or integrations via plugin pattern\u003C/li>\n\u003Cli>\u003Cstrong>ElevenLabs Integration\u003C/strong>: Optional audio synthesis for prompt summaries\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Architecture Overview:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Core\u003C/strong>: Prompt management, template engine, versioning\u003C/li>\n\u003Cli>\u003Cstrong>Adapters\u003C/strong>: Storage (file, memory, Postgres), external MCP servers\u003C/li>\n\u003Cli>\u003Cstrong>API Layer\u003C/strong>: MCP tools/resources, HTTP endpoints, OpenAPI docs\u003C/li>\n\u003Cli>\u003Cstrong>Integrations\u003C/strong>: ElevenLabs, Filesystem/Memory/GitHub MCP servers\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"mcp-typescript-sdk-role\">MCP TypeScript SDK Role\u003C/h2>\n\u003Cp>MCP Prompts is built on the \u003Ca href=\"https://www.npmjs.com/package/@modelcontextprotocol/sdk\">@modelcontextprotocol/sdk\u003C/a>, the canonical TypeScript implementation of the MCP specification. The SDK provides:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Protocol Compliance\u003C/strong>: Handles JSON-RPC, connection lifecycle, and capability negotiation\u003C/li>\n\u003Cli>\u003Cstrong>Server/Client Abstractions\u003C/strong>: Easy creation of MCP servers and clients\u003C/li>\n\u003Cli>\u003Cstrong>Transport Support\u003C/strong>: stdio, Streamable HTTP, and SSE\u003C/li>\n\u003Cli>\u003Cstrong>Schema-Driven APIs\u003C/strong>: Zod-based validation for all tool/resource definitions\u003C/li>\n\u003Cli>\u003Cstrong>Extensibility\u003C/strong>: Register new tools, resources, and prompts with minimal code\u003C/li>\n\u003C/ul>\n\u003Cp>By using the SDK, MCP Prompts ensures full compatibility with the evolving MCP standard and can be easily extended or integrated with other MCP-based tools.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"alternative-approaches\">Alternative Approaches\u003C/h2>\n\u003Cp>Depending on your needs, you may consider:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Other Language Implementations\u003C/strong>: Use \u003Ca href=\"https://github.com/sparesparrow/mcp-prompts-rs\">mcp-prompts-rs\u003C/a> (Rust) for high-performance or embedded use cases\u003C/li>\n\u003Cli>\u003Cstrong>Custom Adapters\u003C/strong>: Implement your own storage or metadata adapters using the documented interfaces\u003C/li>\n\u003Cli>\u003Cstrong>Direct Integration\u003C/strong>: Use the MCP TypeScript SDK to build your own server or client for specialized workflows\u003C/li>\n\u003Cli>\u003Cstrong>Community Servers\u003C/strong>: Leverage other MCP servers (Filesystem, Memory, GitHub, etc.) for federated or distributed prompt management\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"community-packages\">Community Packages\u003C/h2>\n\u003Cp>Recommended packages for advanced use:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.npmjs.com/package/@sparesparrow/mcp-prompts-catalog\">\u003Ccode>@sparesparrow/mcp-prompts-catalog\u003C/code>\u003C/a>: Curated prompt catalog for MCP\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.npmjs.com/package/@sparesparrow/mcp-prompts-contracts\">\u003Ccode>@sparesparrow/mcp-prompts-contracts\u003C/code>\u003C/a>: Shared TypeScript types and OpenAPI contracts\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.npmjs.com/package/@modelcontextprotocol/server-postgres\">\u003Ccode>@modelcontextprotocol/server-postgres\u003C/code>\u003C/a>: PostgreSQL storage adapter\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.npmjs.com/package/@modelcontextprotocol/server-filesystem\">\u003Ccode>@modelcontextprotocol/server-filesystem\u003C/code>\u003C/a>: Filesystem MCP server\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.npmjs.com/package/@modelcontextprotocol/server-memory\">\u003Ccode>@modelcontextprotocol/server-memory\u003C/code>\u003C/a>: In-memory MCP server\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.npmjs.com/package/@modelcontextprotocol/server-github\">\u003Ccode>@modelcontextprotocol/server-github\u003C/code>\u003C/a>: GitHub sync MCP server\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.npmjs.com/package/@modelcontextprotocol/inspector\">\u003Ccode>@modelcontextprotocol/inspector\u003C/code>\u003C/a>: Debugging and inspection tool for MCP servers\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch2 id=\"end-to-end-usage-official-mcp-typescript-sdk-postgresql-inspector-and-proxy\">End-to-End Usage: Official MCP TypeScript SDK, PostgreSQL, Inspector, and Proxy\u003C/h2>\n\u003Cp>This section provides a complete workflow for building, running, debugging, and exposing a custom MCP server using the official TypeScript SDK, PostgreSQL, MCP Inspector, and mcp-proxy. All commands and examples work on Linux, macOS, and Windows (including WSL).\u003C/p>\n\u003Ch3 id=\"1-install-the-official-typescript-sdk-and-dependencies\">1. Install the Official TypeScript SDK and Dependencies\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> @modelcontextprotocol/sdk\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> zod\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> pg\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cul>\n\u003Cli>\u003Ccode>@modelcontextprotocol/sdk\u003C/code> – Official MCP SDK (server, types, transports)\u003C/li>\n\u003Cli>\u003Ccode>zod\u003C/code> – Input and schema validation\u003C/li>\n\u003Cli>\u003Ccode>pg\u003C/code> – PostgreSQL driver\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch3 id=\"2-example-mcp-server-with-postgresql\">2. Example MCP Server with PostgreSQL\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// src/server.ts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { McpServer } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"@modelcontextprotocol/sdk/server/mcp.js\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { StdioServerTransport } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"@modelcontextprotocol/sdk/server/stdio.js\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { Pool } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"pg\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { z } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"zod\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> db\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Pool\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ connectionString: process.env.\u003C/span>\u003Cspan style=\"color:#79B8FF\">DATABASE_URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> server\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> McpServer\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  name: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"mcp-prompts-postgres\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  version: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"1.0.0\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Example tool: fetch a prompt from the database\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">server.\u003C/span>\u003Cspan style=\"color:#B392F0\">registerTool\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  \"getPromptFromDb\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    title: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Get prompt from DB\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    description: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Returns a prompt template stored in Postgres\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    inputSchema: { id: z.\u003C/span>\u003Cspan style=\"color:#B392F0\">string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ({ \u003C/span>\u003Cspan style=\"color:#FFAB70\">id\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">rows\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> db.\u003C/span>\u003Cspan style=\"color:#B392F0\">query\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"SELECT text FROM prompts WHERE id = $1\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      [id]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      content: [{ type: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"text\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, text: rows[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]?.text \u003C/span>\u003Cspan style=\"color:#F97583\">??\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Not found\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Start the server using stdio transport\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> server.\u003C/span>\u003Cspan style=\"color:#B392F0\">connect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">new\u003C/span>\u003Cspan style=\"color:#B392F0\"> StdioServerTransport\u003C/span>\u003Cspan style=\"color:#E1E4E8\">());\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Ch3 id=\"3-local-environment-with-docker-compose\">3. Local Environment with Docker Compose\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># docker-compose.yml\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">version\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"3.9\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">services\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  postgres\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    image\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">postgres:16\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    environment\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">      POSTGRES_DB\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">mcp\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">      POSTGRES_USER\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">mcp\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">      POSTGRES_PASSWORD\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">mcp\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    ports\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"5432:5432\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    volumes\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"./pgdata:/var/lib/postgresql/data\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  mcp-server\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    build\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    command\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">node dist/server.js\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    environment\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">      DATABASE_URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">postgres://mcp:mcp@postgres:5432/mcp\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    depends_on\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">postgres\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Ch3 id=\"4-debugging-with-mcp-inspector\">4. Debugging with MCP Inspector\u003C/h3>\n\u003Col>\n\u003Cli>Build your server:\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> tsc\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003C/li>\n\u003Cli>Start the Inspector with your server binary:\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> @modelcontextprotocol/inspector\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> node\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> dist/server.js\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\nThe Inspector UI will open at \u003Ca href=\"http://localhost:6274\">http://localhost:6274\u003C/a> and allows you to:\n\u003Cul>\n\u003Cli>Switch transport (stdio / http)\u003C/li>\n\u003Cli>Browse Resources/Prompts/Tools\u003C/li>\n\u003Cli>Send test requests and view logs\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Chr>\n\u003Ch3 id=\"5-exposing-the-server-remotely-with-mcp-proxy\">5. Exposing the Server Remotely with mcp-proxy\u003C/h3>\n\u003Cp>If you need to connect a client expecting SSE or Streamable HTTP to your stdio-based server, use mcp-proxy as a bridge:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># stdio → SSE bridge on port 8080\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npx\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -y\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> @modelcontextprotocol/proxy\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --stdio\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"node dist/server.js\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --sse\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 8080\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This will expose your MCP server over SSE/HTTP for remote access.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"integration-with-other-mcp-servers\">Integration with Other MCP Servers\u003C/h2>\n\u003Cp>MCP Prompts can be used standalone or as part of a federated MCP ecosystem. Integration patterns include:\u003C/p>\n\u003Ch3 id=\"1-client-side-federation\">1. \u003Cstrong>Client-Side Federation\u003C/strong>\u003C/h3>\n\u003Cp>Configure multiple MCP servers in your host application (e.g., Claude Desktop, Cursor):\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"mcpServers\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"mcp-prompts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: { \u003C/span>\u003Cspan style=\"color:#79B8FF\">\"command\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"npx\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">\"args\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"-y\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"@sparesparrow/mcp-prompts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"filesystem\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: { \u003C/span>\u003Cspan style=\"color:#79B8FF\">\"command\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"npx\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">\"args\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"-y\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"@modelcontextprotocol/server-filesystem\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/path/to/files\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"memory\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: { \u003C/span>\u003Cspan style=\"color:#79B8FF\">\"command\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"npx\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">\"args\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"-y\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"@modelcontextprotocol/server-memory\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"github\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: { \u003C/span>\u003Cspan style=\"color:#79B8FF\">\"command\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"npx\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">\"args\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"-y\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"@modelcontextprotocol/server-github\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"2-server-side-integration\">2. \u003Cstrong>Server-Side Integration\u003C/strong>\u003C/h3>\n\u003Cp>MCP Prompts can connect to other MCP servers (Filesystem, Memory, GitHub) as storage or metadata backends via adapters. Use Docker Compose for orchestration:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">version\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'3.8'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">services\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  mcp-prompts\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    image\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">ghcr.io/sparesparrow/mcp-prompts:latest\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    environment\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">STORAGE_TYPE=file\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">PROMPTS_DIR=/app/prompts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    volumes\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">./prompts:/app/prompts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    depends_on\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">filesystem-server\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">memory-server\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">github-server\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  filesystem-server\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    image\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">ghcr.io/modelcontextprotocol/server-filesystem:latest\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    volumes\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">./prompts:/prompts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  memory-server\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    image\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">ghcr.io/modelcontextprotocol/server-memory:latest\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    volumes\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">./data:/data\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  github-server\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    image\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">ghcr.io/modelcontextprotocol/server-github:latest\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    environment\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      - \u003C/span>\u003Cspan style=\"color:#9ECBFF\">GITHUB_PERSONAL_ACCESS_TOKEN=${GITHUB_TOKEN}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"3-routing-and-federation\">3. \u003Cstrong>Routing and Federation\u003C/strong>\u003C/h3>\n\u003Cp>MCP Prompts does not natively proxy or federate requests to other servers, but you can use API gateways, custom adapters, or orchestration tools to build federated workflows. See the \u003Ca href=\"docs/06-mcp-integration.md\">MCP Integration Guide\u003C/a> for advanced patterns.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"contributing\">Contributing\u003C/h2>\n\u003Cp>We welcome contributions of all kinds! Please see \u003Ca href=\"CONTRIBUTING.md\">CONTRIBUTING.md\u003C/a> for guidelines, code style, and the PR process.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"license\">License\u003C/h2>\n\u003Cp>MIT License. See \u003Ca href=\"LICENSE\">LICENSE\u003C/a>.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"support\">Support\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Bugs &#x26; Issues:\u003C/strong> \u003Ca href=\"../../issues\">GitHub Issues\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Discussions:\u003C/strong> \u003Ca href=\"../../discussions\">GitHub Discussions\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Commercial Support:\u003C/strong> \u003Ca href=\"mailto:support@sparrowai.tech\">Sparrow AI &#x26; Tech\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Cp>\u003Csub>Built with ❤️ by \u003Ca href=\"https://github.com/sparesparrow\">@sparesparrow\u003C/a> and the \u003Ca href=\"https://github.com/sparesparrow/mcp-prompts/graphs/contributors\">community\u003C/a>\u003C/sub>\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"️-příklady-konfigurace-mcp-klienta-a-serveru-mcpjson-env\">🛠️ Příklady konfigurace MCP klienta a serveru (\u003Ccode>mcp.json\u003C/code>, \u003Ccode>.env\u003C/code>)\u003C/h2>\n\u003Cp>MCP klienti (např. Cursor, Claude Desktop, VS Code, Amazon Q) podporují různé formáty konfiguračních souborů a způsoby spouštění MCP serveru. Níže najdete vzorové konfigurace pro všechny běžné scénáře.\u003C/p>\n\u003Ch3 id=\"1-formáty-mcpjson\">1. Formáty \u003Ccode>mcp.json\u003C/code>\u003C/h3>\n\u003Ch4 id=\"a-formát-mcpservers-cursor-claude-desktop-amazon-q\">a) Formát \u003Ccode>mcpServers\u003C/code> (Cursor, Claude Desktop, Amazon Q)\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"mcpServers\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"mcp-prompts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"command\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"npx\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"args\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"-y\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"@sparesparrow/mcp-prompts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"env\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        \"PROMPTS_DIR\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"./my-prompts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        \"STORAGE_TYPE\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"postgres\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"timeout\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">30000\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"b-formát-servers-vs-code-hugging-face-clients\">b) Formát \u003Ccode>servers\u003C/code> (VS Code, Hugging Face clients)\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"servers\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"mcp-prompts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"transport\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        \"type\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"stdio\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        \"command\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"npx\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        \"args\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"-y\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"@sparesparrow/mcp-prompts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"env\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        \"PROMPTS_DIR\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"./my-prompts\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"2-konfigurace-pro-různá-prostředí\">2. Konfigurace pro různá prostředí\u003C/h3>\n\u003Ch4 id=\"linux-host\">\u003Cstrong>Linux Host\u003C/strong>\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"mcpServers\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"mcp-prompts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"command\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/usr/bin/node\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"args\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/opt/mcp-prompts/dist/server.js\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"env\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        \"PROMPTS_DIR\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/home/user/prompts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        \"STORAGE_TYPE\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"file\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        \"NODE_ENV\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"production\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Alternativně s wrapper scriptem:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"mcpServers\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"mcp-prompts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"command\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"./scripts/start-mcp-prompts.sh\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"windows-host\">\u003Cstrong>Windows Host\u003C/strong>\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"mcpServers\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"mcp-prompts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"command\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"C:\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\\\\u003C/span>\u003Cspan style=\"color:#9ECBFF\">Program Files\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\\\\u003C/span>\u003Cspan style=\"color:#9ECBFF\">nodejs\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\\\\u003C/span>\u003Cspan style=\"color:#9ECBFF\">node.exe\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"args\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"C:\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\\\\u003C/span>\u003Cspan style=\"color:#9ECBFF\">mcp-prompts\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\\\\u003C/span>\u003Cspan style=\"color:#9ECBFF\">dist\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\\\\u003C/span>\u003Cspan style=\"color:#9ECBFF\">server.js\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"env\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        \"PROMPTS_DIR\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"C:\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\\\\u003C/span>\u003Cspan style=\"color:#9ECBFF\">Users\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\\\\u003C/span>\u003Cspan style=\"color:#9ECBFF\">%USERNAME%\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\\\\u003C/span>\u003Cspan style=\"color:#9ECBFF\">Documents\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\\\\u003C/span>\u003Cspan style=\"color:#9ECBFF\">prompts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        \"STORAGE_TYPE\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"file\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"docker-image\">\u003Cstrong>Docker Image\u003C/strong>\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"mcpServers\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"mcp-prompts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"command\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"docker\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"args\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"run\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"-i\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"--rm\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"-v\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"${PWD}/prompts:/app/prompts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"-e\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"PROMPTS_DIR=/app/prompts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"-e\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"POSTGRES_URL\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"sparesparrow/mcp-prompts:latest\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      ],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"env\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        \"POSTGRES_URL\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"${POSTGRES_URL}\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"npm-package-doporučený-způsob\">\u003Cstrong>NPM Package (doporučený způsob)\u003C/strong>\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"mcpServers\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    \"mcp-prompts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"command\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"npx\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"args\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"-y\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"@sparesparrow/mcp-prompts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"--source\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"catalog:\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"--source\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"file:./company-prompts\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      ],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"env\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        \"STORAGE_TYPE\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"postgres\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        \"POSTGRES_URL\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"${POSTGRES_URL}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        \"LOG_LEVEL\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"info\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"3-bezpečné-proměnné-prostředí-env-a-vs-code-style\">3. Bezpečné proměnné prostředí (\u003Ccode>.env\u003C/code> a VS Code style)\u003C/h3>\n\u003Cp>Doporučujeme používat \u003Ccode>.env\u003C/code> soubor nebo bezpečné prompty pro citlivé údaje:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>POSTGRES_URL=postgres://user:password@localhost:5432/mcp_prompts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>PROMPTS_DIR=./prompts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>LOG_LEVEL=info\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Nebo v konfiguraci VS Code:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  \"inputs\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"type\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"promptString\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"id\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"postgres-url\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"description\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"PostgreSQL Connection URL\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"password\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"type\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"promptString\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"id\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"prompts-dir\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      \"description\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Cesta k promptům\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"hexagonální-architektura-v-mcp-prompts\">Hexagonální architektura v MCP-Prompts\u003C/h2>\n\u003Cp>Projekt \u003Ccode>mcp-prompts\u003C/code> je navržen podle principů hexagonální architektury (architektura portů a adaptérů), která zajišťuje čisté oddělení doménové logiky od vnějších závislostí (např. úložiště, templating, transportní vrstvy). Tento přístup přináší:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Lepší testovatelnost\u003C/strong>: Doménová logika je izolovaná a snadno testovatelná bez závislosti na konkrétních implementacích adaptérů.\u003C/li>\n\u003Cli>\u003Cstrong>Snadná rozšiřitelnost\u003C/strong>: Nové typy úložišť, šablonovacích systémů nebo transportních vrstev lze přidávat bez zásahu do jádra aplikace.\u003C/li>\n\u003Cli>\u003Cstrong>Udržovatelnost\u003C/strong>: Jasné rozhraní mezi doménou a infrastrukturou usnadňuje refaktoring a vývoj.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"struktura-projektu-podle-hexagonální-architektury\">Struktura projektu podle hexagonální architektury\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Ccode>core/domain/\u003C/code> – Doménové entity a business logika (např. \u003Ccode>prompt.entity.ts\u003C/code>)\u003C/li>\n\u003Cli>\u003Ccode>core/ports/\u003C/code> – Rozhraní (porty) pro interakci s doménou (např. \u003Ccode>prompt.repository.ts\u003C/code>, \u003Ccode>templating.port.ts\u003C/code>, \u003Ccode>api.port.ts\u003C/code>)\u003C/li>\n\u003Cli>\u003Ccode>core/services/\u003C/code> – Doménové služby (např. \u003Ccode>prompt.service.ts\u003C/code>)\u003C/li>\n\u003Cli>\u003Ccode>adapters/\u003C/code> – Implementace portů (adaptéry), např. \u003Ccode>file-storage.adapter.ts\u003C/code>, \u003Ccode>eta-templating.adapter.ts\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>transports/\u003C/code> – Transportní vrstvy (např. HTTP, MCP, SSE)\u003C/li>\n\u003Cli>\u003Ccode>index.ts\u003C/code> – Kompozice aplikace, propojení portů a adaptérů\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"praktické-příklady\">Praktické příklady\u003C/h3>\n\u003Cul>\n\u003Cli>Pro přidání nového úložiště stačí implementovat rozhraní \u003Ccode>PromptRepository\u003C/code> a zaregistrovat adaptér.\u003C/li>\n\u003Cli>Pro změnu templating systému stačí implementovat \u003Ccode>TemplatingPort\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"odkazy\">Odkazy\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://modelcontextprotocol.io/specification/2025-06-18/architecture\">Oficiální MCP architektura\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://alistair.cockburn.us/hexagonal-architecture/\">Hexagonal Architecture (Alistair Cockburn)\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"architecture-hexagonal-ports--adapters\">Architecture: Hexagonal (Ports &#x26; Adapters)\u003C/h2>\n\u003Cp>mcp-prompts is architected using the Hexagonal Architecture (Ports &#x26; Adapters) pattern. This design separates the core business logic from external systems (storage, APIs, UI) via well-defined interfaces (ports) and their implementations (adapters).\u003C/p>\n\u003Cp>\u003Cstrong>Key Components:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Core (Hexagon):\u003C/strong> Pure business logic for prompt management, versioning, templating, and validation. No dependencies on frameworks or infrastructure.\u003C/li>\n\u003Cli>\u003Cstrong>Ports (Interfaces):\u003C/strong>\n\u003Cul>\n\u003Cli>\u003Cstrong>Primary Port:\u003C/strong> \u003Ccode>IPromptApplication\u003C/code> – defines the API for all use cases (add, get, list, apply, etc.).\u003C/li>\n\u003Cli>\u003Cstrong>Secondary Ports:\u003C/strong>\n\u003Cul>\n\u003Cli>\u003Ccode>IPromptRepository\u003C/code> – contract for data persistence (file, Postgres, etc.).\u003C/li>\n\u003Cli>\u003Ccode>ITemplatingEngine\u003C/code> – contract for rendering templates.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>Adapters (Implementations):\u003C/strong>\n\u003Cul>\n\u003Cli>\u003Cstrong>Primary/Driving:\u003C/strong>\n\u003Cul>\n\u003Cli>\u003Ccode>MCPAdapter\u003C/code> (MCP JSON-RPC stdio/SSE)\u003C/li>\n\u003Cli>\u003Ccode>RestApiAdapter\u003C/code> (Express/HTTP, optional/future)\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Cstrong>Secondary/Driven:\u003C/strong>\n\u003Cul>\n\u003Cli>\u003Ccode>FileStorageAdapter\u003C/code> (JSON files)\u003C/li>\n\u003Cli>\u003Ccode>PostgresStorageAdapter\u003C/code> (PostgreSQL)\u003C/li>\n\u003Cli>\u003Ccode>EtaTemplatingAdapter\u003C/code> (template rendering)\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Benefits:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>Isolated, testable core logic\u003C/li>\n\u003Cli>Easy to add new storage or API adapters\u003C/li>\n\u003Cli>Stable, maintainable, and extensible foundation for the MCP ecosystem\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Directory Structure Example:\u003C/strong>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>mcp-prompts/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  core/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    entities/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    services/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    ports/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  adapters/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    primary/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>      mcp/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>      rest/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    secondary/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>      file/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>      postgres/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>      eta/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  tests/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    core/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    adapters/\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Testing:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>Core logic is tested with in-memory/mock ports (no I/O required).\u003C/li>\n\u003Cli>Adapters are tested with real dependencies (integration tests).\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Integration:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>MCPAdapter uses \u003Ccode>@modelcontextprotocol/sdk\u003C/code> to register tools/resources.\u003C/li>\n\u003Cli>Compatible with MCP Inspector, mcp-cli, Claude Desktop, and other MCP clients.\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>References:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://en.wikipedia.org/wiki/Hexagonal_architecture_(software)\">Hexagonal Architecture: Wikipedia\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://modelcontextprotocol.io/specification/2025-06-18/architecture\">MCP Specification\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://dev.to/stevengonsalvez/stop-losing-prompts-build-your-own-mcp-prompt-registry-4fi1\">DEV: Stop Losing Prompts – Build Your Own MCP Prompt Registry\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"mcp-prompts-monorepo-build-setup\">MCP Prompts Monorepo Build Setup\u003C/h2>\n\u003Ch2 id=\"typescript-monorepo-best-practices\">TypeScript Monorepo Best Practices\u003C/h2>\n\u003Cul>\n\u003Cli>Each package has its own \u003Ccode>tsconfig.json\u003C/code> extending a shared \u003Ccode>tsconfig.options.json\u003C/code>.\u003C/li>\n\u003Cli>The shared config enables ESM (\u003Ccode>module: NodeNext\u003C/code>), strict type checking, and emits both \u003Ccode>.js\u003C/code> and \u003Ccode>.d.ts\u003C/code> files for all source files.\u003C/li>\n\u003Cli>\u003Ccode>emitDeclarationOnly\u003C/code> is \u003Cstrong>not\u003C/strong> used, so both JavaScript and type declarations are available for downstream packages.\u003C/li>\n\u003Cli>\u003Cstrong>Build order matters:\u003C/strong>\n\u003Col>\n\u003Cli>Build \u003Ccode>@mcp-prompts/core\u003C/code> first (it emits all types and JS for downstream packages).\u003C/li>\n\u003Cli>Then build \u003Ccode>@mcp-prompts/adapters-file\u003C/code> and \u003Ccode>@mcp-prompts/adapters-memory\u003C/code>.\u003C/li>\n\u003Cli>Then run \u003Ccode>pnpm -r build\u003C/code> for the full monorepo.\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003Cli>The script \u003Ccode>src/scripts/validate-prompts.ts\u003C/code> is excluded from the core build to avoid circular dependencies (it depends on adapters-file, which depends on core). If you need to build or run this script, do so separately after the main build.\u003C/li>\n\u003Cli>All imports between packages use the built outputs (e.g., \u003Ccode>@mcp-prompts/core/dist/interfaces.js\u003C/code>).\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"troubleshooting\">Troubleshooting\u003C/h2>\n\u003Cul>\n\u003Cli>If you see errors about missing modules or types, ensure you have built \u003Ccode>@mcp-prompts/core\u003C/code> first and that all \u003Ccode>dist/\u003C/code> directories are up to date.\u003C/li>\n\u003Cli>If you change the shared config or move files, clean all \u003Ccode>dist/\u003C/code> directories and rebuild.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"references\">References\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://turborepo.com/docs/guides/tools/typescript\">Turborepo TypeScript Monorepo Guide\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.timsanteford.com/posts/streamlining-your-next-js-builds-with-a-separate-typescript-configuration/\">Separate tsconfig for builds\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":278,"localImagePaths":409,"remoteImagePaths":410,"frontmatter":411,"imagePaths":412},[279,282,285,288,289,290,293,296,299,302,305,308,311,314,317,320,323,326,329,332,335,338,341,344,347,348,349,352,355,358,361,364,367,370,373,376,379,382,385,388,391,394,397,400,403,406],{"depth":25,"slug":280,"text":281},"mcp-prompts-server--sparesparrowmcp-prompts","MCP Prompts Server · @sparesparrow/mcp-prompts",{"depth":28,"slug":283,"text":284},"table-of-contents","Table of Contents",{"depth":28,"slug":286,"text":287},"why-mcp-prompts","Why MCP Prompts?",{"depth":28,"slug":29,"text":30},{"depth":28,"slug":35,"text":36},{"depth":38,"slug":291,"text":292},"1-run-with-npx-recommended-for-most-users","1. Run with NPX (Recommended for Most Users)",{"depth":38,"slug":294,"text":295},"2-run-with-docker","2. Run with Docker",{"depth":38,"slug":297,"text":298},"3-build-from-source","3. Build from Source",{"depth":38,"slug":300,"text":301},"4-health-check","4. Health Check",{"depth":28,"slug":303,"text":304},"scripts--cli-reference","Scripts & CLI Reference",{"depth":28,"slug":306,"text":307},"mcp-features--architecture","MCP Features & Architecture",{"depth":28,"slug":309,"text":310},"mcp-typescript-sdk-role","MCP TypeScript SDK Role",{"depth":28,"slug":312,"text":313},"alternative-approaches","Alternative Approaches",{"depth":28,"slug":315,"text":316},"community-packages","Community Packages",{"depth":28,"slug":318,"text":319},"end-to-end-usage-official-mcp-typescript-sdk-postgresql-inspector-and-proxy","End-to-End Usage: Official MCP TypeScript SDK, PostgreSQL, Inspector, and Proxy",{"depth":38,"slug":321,"text":322},"1-install-the-official-typescript-sdk-and-dependencies","1. Install the Official TypeScript SDK and Dependencies",{"depth":38,"slug":324,"text":325},"2-example-mcp-server-with-postgresql","2. Example MCP Server with PostgreSQL",{"depth":38,"slug":327,"text":328},"3-local-environment-with-docker-compose","3. Local Environment with Docker Compose",{"depth":38,"slug":330,"text":331},"4-debugging-with-mcp-inspector","4. Debugging with MCP Inspector",{"depth":38,"slug":333,"text":334},"5-exposing-the-server-remotely-with-mcp-proxy","5. Exposing the Server Remotely with mcp-proxy",{"depth":28,"slug":336,"text":337},"integration-with-other-mcp-servers","Integration with Other MCP Servers",{"depth":38,"slug":339,"text":340},"1-client-side-federation","1. Client-Side Federation",{"depth":38,"slug":342,"text":343},"2-server-side-integration","2. Server-Side Integration",{"depth":38,"slug":345,"text":346},"3-routing-and-federation","3. Routing and Federation",{"depth":28,"slug":54,"text":55},{"depth":28,"slug":57,"text":58},{"depth":28,"slug":350,"text":351},"support","Support",{"depth":28,"slug":353,"text":354},"️-příklady-konfigurace-mcp-klienta-a-serveru-mcpjson-env","🛠️ Příklady konfigurace MCP klienta a serveru (mcp.json, .env)",{"depth":38,"slug":356,"text":357},"1-formáty-mcpjson","1. Formáty mcp.json",{"depth":112,"slug":359,"text":360},"a-formát-mcpservers-cursor-claude-desktop-amazon-q","a) Formát mcpServers (Cursor, Claude Desktop, Amazon Q)",{"depth":112,"slug":362,"text":363},"b-formát-servers-vs-code-hugging-face-clients","b) Formát servers (VS Code, Hugging Face clients)",{"depth":38,"slug":365,"text":366},"2-konfigurace-pro-různá-prostředí","2. Konfigurace pro různá prostředí",{"depth":112,"slug":368,"text":369},"linux-host","Linux Host",{"depth":112,"slug":371,"text":372},"windows-host","Windows Host",{"depth":112,"slug":374,"text":375},"docker-image","Docker Image",{"depth":112,"slug":377,"text":378},"npm-package-doporučený-způsob","NPM Package (doporučený způsob)",{"depth":38,"slug":380,"text":381},"3-bezpečné-proměnné-prostředí-env-a-vs-code-style","3. Bezpečné proměnné prostředí (.env a VS Code style)",{"depth":28,"slug":383,"text":384},"hexagonální-architektura-v-mcp-prompts","Hexagonální architektura v MCP-Prompts",{"depth":38,"slug":386,"text":387},"struktura-projektu-podle-hexagonální-architektury","Struktura projektu podle hexagonální architektury",{"depth":38,"slug":389,"text":390},"praktické-příklady","Praktické příklady",{"depth":38,"slug":392,"text":393},"odkazy","Odkazy",{"depth":28,"slug":395,"text":396},"architecture-hexagonal-ports--adapters","Architecture: Hexagonal (Ports & Adapters)",{"depth":28,"slug":398,"text":399},"mcp-prompts-monorepo-build-setup","MCP Prompts Monorepo Build Setup",{"depth":28,"slug":401,"text":402},"typescript-monorepo-best-practices","TypeScript Monorepo Best Practices",{"depth":28,"slug":404,"text":405},"troubleshooting","Troubleshooting",{"depth":28,"slug":407,"text":408},"references","References",[],[],{"title":266,"description":269,"repo_url":270,"pubDate":65},[],"mcp-prompts.md"]