---
globs:
  - "**/*"
alwaysApply: true
---

# E2E Testing with Cypress: Practical Guide for Markdown and Mermaid

## 1. File Paths
- Test page: `/MarkdownTest` (case-sensitive, matches Astro route)
- To test a markdown file in `/articles`:
  ```js
  cy.visit('/markdown-test?src=/articles/mcp-prompts.md')
  ```
- For a file in `/dist`:
  ```js
  cy.visit('/markdown-test?src=/dist/human-action-README.md')
  ```
- For a file in `/public`:
  ```js
  cy.visit('/markdown-test?src=/public/your-doc.md')
  ```

## 2. Selectors
- **Markdown Content:**
  ```js
  cy.get('.prose')
  ```
- **Mermaid Diagrams:**
  ```js
  cy.get('.mermaid-diagram').find('svg')
  ```
- **Loading State:**
  ```js
  cy.contains('Loading')
  ```
- **Error State:**
  ```js
  cy.contains('Error')
  ```
- **Custom Class:**
  ```js
  cy.visit('/markdown-test?src=/articles/mcp-prompts.md&className=my-custom-class')
  cy.get('.my-custom-class')
  ```

> **Note:** Keep selectors and class names in sync with the React component. Update this rule if the component structure or styling changes.

## 3. General Tips
- Use `cy.intercept()` to mock fetches for error/loading state tests.
- Use `cy.get()` with more specific selectors if you add `data-cy` attributes for robustness.
- Update selectors if you change the structure of `MarkdownViewer` or similar components.

## Example Cypress Test Snippet
```js
it('renders markdown content', () => {
  cy.visit('/markdown-test?src=/articles/mcp-prompts.md');
  cy.get('.prose').should('exist');
  cy.contains('Some expected heading or text from the markdown');
});

it('renders mermaid diagram', () => {
  cy.visit('/markdown-test?src=/articles/mermaid-example.md');
  cy.get('.mermaid-diagram').find('svg').should('exist');
});

it('shows error on fetch fail', () => {
  cy.intercept('GET', '/articles/does-not-exist.md', { statusCode: 404 });
  cy.visit('/markdown-test?src=/articles/does-not-exist.md');
  cy.contains('Error').should('exist');
});
```

## Summary
- Update Cypress test file paths to match `/markdown-test?src=...`.
- Use `.prose`, `.mermaid-diagram`, and custom classes as selectors.
- Adjust as needed if you change your component's structure or styling.

---
- Regularly update and refactor tests as your UI evolves.
- Review and refine AI-generated tests for accuracy and maintainability.

---

This rule is always applied to E2E Cypress tests for Markdown/Mermaid in this project.
