---
alwaysApply: true
description: Folder structure guide for the project.
---

# Project Folder Structure Guide

This rule explains the roles and purposes of key directories in this project.

---

## `/src`
**Purpose:**  
- Contains the main source code for your application (typically React components, logic, and entry points).
- `/src/pages/index.astro` is the homepage for Astro

**Usage:**  
- All core app logic, UI, and routing are implemented here.
- The entry point is usually `index.js`, which renders the root React component (`App.js`).
- This folder is processed by your build tool (Vite, CRA, etc.) to produce the final site in `/dist` or `/build`.

---

## `/cypress`
**Purpose:**  
- Contains end-to-end (E2E) and integration tests for your application, using the Cypress testing framework.

**Usage:**  
- `/cypress/e2e/`: Test specifications (test files).
- `/cypress/fixtures/`: Test data (e.g., JSON files for mock data).
- `/cypress/support/`: Custom commands and setup for Cypress.
- Used to ensure your app works as expected from the user's perspective.

---

## `/articles`
**Purpose:**  
- Stores Markdown (`.md`) files for articles, blog posts, or documentation.

**Usage:**  
- Each file is a separate article or content page.
- If using a static site generator (like Jekyll), these are converted to HTML.
- In a React/Vite setup, you might import or process these files to display content dynamically.

---

## `/dist`
- **Output for Astro and Vite**
- Main deployable output for Astro (and Vite)
- Only one of `/dist`, `/build`, or `/_site` should be used for deployment, depending on stack

---

## `/build`
- **Generated by:** Create React App (CRA) or legacy React build process
- **How:**  
  - The script `"build"` in a typical CRA project outputs to `/build`.
  - Your `.github/workflows/deploy-react.yml` workflow uploads the `/build` directory for deployment.
- **Deploy:** Used if you run a CRA-based build (not the default for Vite).

---

## `/_site`
- **Generated by:** Jekyll (static site generator)
- **How:**  
  - The GitHub Actions workflow `.github/workflows/jekyll.yml` runs `bundle exec jekyll build`, which outputs the static site to `/_site`.
  - This is standard for Jekyll-based sites, especially for GitHub Pages.
- **Deploy:** Used if you are building the site with Jekyll.

---

## `/public`
- **Not generated by a tool**; this is a source folder.
- **How:**  
  - You manually place static assets here.
  - Build tools (Vite, CRA) copy these files into the output directory (`/dist` or `/build`).

---

## `/assets`
- **Not generated by a tool**; this is a source folder.
- **How:**  
  - You manually place static files here (images, CSS, JS, etc.).
  - Build tools copy these files to the output directory.

---

## `/infographics`
- **Not generated by a tool**; this is a source folder.
- **How:**  
  - You manually place HTML files here.
  - Build tools copy these files to the output directory.

---

## `/languages`
- **Not generated by a tool**; this is a source folder.
- **How:**  
  - You manually place JSON translation files here.
  - Used for multilingual UI.

---

## Summary Table

| Folder      | Purpose/Contents                        | Usage in Project                        |
|-------------|-----------------------------------------|-----------------------------------------|
| `/src`      | Main application source code (React)    | Core app logic, UI, entry point         |
| `/cypress`  | E2E/integration tests (Cypress)         | Automated testing of app functionality  |
| `/dist`     | Bundled site, assets (Vite)             | Main deployable output (Vite)           |
| `/build`    | Bundled site, assets (CRA)              | Deployable output (CRA, legacy)         |
| `/_site`    | Generated static site (Jekyll)          | Deployable output (Jekyll, SSG)         |
| `/public`   | Static assets, HTML                     | Dev server, build tool (source)         |
| `/assets`   | Static files: images, CSS, JS, etc.     | Referenced in site/app, copied to build |
| `/articles` | Markdown files for articles/docs        | Content for site, rendered or converted |
| `/infographics` | Standalone HTML files for infographics | Linked/embedded as static pages         |
| `/languages`| JSON files for translations (i18n)      | Loaded for multilingual UI              |

---

**In short:**  
- `/src` = your app's code  
- `/cypress` = your app's tests  
- `/dist`, `/build`, `/_site` = build outputs (deploy one)  
- `/public`, `/assets` = static resources  
- `/articles` = written content  
- `/infographics` = visual content  
- `/languages` = translation files

---

**For Astro, `/dist` is the main output and `/src/pages/index.astro` is the homepage.**

---

**V tomto projektu je `/dist` hlavní výstup pro Vite, `/build` pro CRA (pokud se použije) a `/_site` pro Jekyll. Pro nasazení se obvykle používá pouze jedna z těchto složek podle zvoleného stacku.**
