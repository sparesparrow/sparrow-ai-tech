---
alwaysApply: true
description: GitHub Pages Deployment Best Practices
---

# GitHub Pages Deployment Best Practices

## For Astro Projects
- Use the official `withastro/action` for build and deploy in GitHub Actions.
- Set `site` and `base` in `astro.config.mjs` for project sites:
  ```js
  export default defineConfig({
    site: 'https://<username>.github.io/<repo>',
    base: '/<repo>/',
    // ...
  });
  ```
- Ensure `dist/index.html` exists (homepage must be at root of output).
- Only static HTML, CSS, JS are supported (no server-side code).
- Reference assets using the `base` path if set.
- See [Astro GitHub Pages deployment docs](https://docs.astro.build/en/guides/deploy/github/).

## General
- Use only static HTML, CSS, JS, and supported Jekyll features (Markdown, Liquid, YAML front matter).
- Do not use server-side code (PHP, Python, etc.).
- Use relative URLs or the Jekyll `relative_url` filter for links and assets if using Jekyll.
- Add YAML front matter to every Markdown or HTML file you want Jekyll to process.
- Test your site locally before pushing to GitHub.
- Use the official actions: `actions/checkout`, `actions/configure-pages`, `actions/upload-pages-artifact`, and `actions/deploy-pages`.
- Set permissions: `pages: write`, `id-token: write`, `contents: read`.
- Use a two-job pattern: one for build, one for deploy.
- Use `concurrency` to avoid overlapping deployments.
- For more, see [GitHub Pages documentation](https://docs.github.com/en/pages).


- For more, see the [GitHub Pages custom workflow documentation](https://docs.github.com/en/pages/getting-started-with-github-pages/using-custom-workflows-with-github-pages)

