/**
 * E2E testy pro komponentu MarkdownViewer.
 *
 * Testovan√© sc√©n√°≈ôe:
 * 1. Naƒç√≠t√°n√≠ a renderov√°n√≠ markdownu z libovoln√© cesty (nap≈ô. /articles/mcp-prompts.md)
 * 2. Renderov√°n√≠ Mermaid diagram≈Ø (kontrola .mermaid-diagram a SVG v√Ωstupu)
 * 3. Konzistentn√≠ stylov√°n√≠ (kontrola t≈ô√≠d prose a prose-invert)
 * 4. Stav naƒç√≠t√°n√≠ a chyb (simulace ne√∫spƒõ≈°n√©ho fetch a kontrola loading/error hl√°≈°ek)
 * 5. Podpora vlastn√≠ho className (kontrola, zda je vlastn√≠ t≈ô√≠da aplikov√°na)
 *
 * Dal≈°√≠ kroky:
 * - Ujistƒõte se, ≈æe existuje testovac√≠ str√°nka na /markdown-test, kter√° vykresluje MarkdownViewer s parametry src a className z query stringu.
 * - Upravte selektory a cesty k soubor≈Øm dle va≈°√≠ skuteƒçn√© implementace a routov√°n√≠.
 * - Spus≈•te Cypress testy pro ovƒõ≈ôen√≠ chov√°n√≠ komponenty.
 */

describe('MarkdownViewer Component', () => {
  // Cesta k testovac√≠mu markdown souboru
  const testMd = '/articles/mcp-prompts.md';
  // Cesta k markdown souboru obsahuj√≠c√≠mu Mermaid diagram
  const testMermaidMd = '/articles/mcp-prompts-rs.md'; // P≈ôedpokl√°d√° se, ≈æe tento soubor obsahuje Mermaid diagram
  // Cesta k neexistuj√≠c√≠mu markdown souboru pro testov√°n√≠ chybov√©ho stavu
  const notFoundMd = '/articles/does-not-exist.md';

  /**
   * Test: Naƒç√≠t√°n√≠ a renderov√°n√≠ markdownu z libovoln√© cesty
   */
  it('fetches and renders markdown from any path', () => {
    cy.visit(`/sparrow-ai-tech/markdown-test?src=${testMd}`);
    cy.get('.markdown-viewer').should('exist');
    cy.contains('MCP Prompts').should('exist'); // Upravte na existuj√≠c√≠ nadpis v testovac√≠m souboru
  });

  /**
   * Test: Renderov√°n√≠ Mermaid diagram≈Ø
   */
  it('renders Mermaid diagrams', () => {
    cy.visit(`/sparrow-ai-tech/markdown-test?src=${testMermaidMd}`);
    cy.get('.mermaid-diagram').should('exist');
    cy.get('.mermaid-diagram svg').should('exist');
  });

  /**
   * Test: Konzistentn√≠ stylov√°n√≠ pomoc√≠ t≈ô√≠d prose
   */
  it('applies consistent styling with prose classes', () => {
    cy.visit(`/sparrow-ai-tech/markdown-test?src=${testMd}`);
    cy.get('.markdown-viewer').should('have.class', 'prose').and('have.class', 'prose-invert');
  });

  /**
   * Test: Zobrazen√≠ stav≈Ø naƒç√≠t√°n√≠ a chyb
   */
  it('shows loading and error states', () => {
    cy.intercept('GET', notFoundMd, { statusCode: 404 }).as('fetch404');
    cy.visit(`/sparrow-ai-tech/markdown-test?src=${notFoundMd}`);
    cy.get('.markdown-viewer-loading').should('exist');
    cy.wait('@fetch404');
    cy.get('.markdown-viewer-error').should('exist').and('contain', 'Failed to fetch');
  });

  /**
   * Test: Podpora vlastn√≠ho className
   */
  it('applies custom className', () => {
    // P≈ôedpoklad: /markdown-test?src=...&className=custom-md-class p≈ôid√° vlastn√≠ t≈ô√≠du
    cy.visit(`/sparrow-ai-tech/markdown-test?src=${testMd}&className=custom-md-class`);
    cy.get('.markdown-viewer').should('have.class', 'custom-md-class');
  });

  it('renders markdown content', () => {
    cy.visit('/sparrow-ai-tech/markdown-test?src=./articles/mcp-prompts.md');
    cy.get('.prose').should('exist');
    cy.contains('Some expected heading or text from the markdown');
  });

  it('renders mermaid diagram', () => {
    cy.visit('/sparrow-ai-tech/markdown-test?src=./articles/mermaid-example.md');
    cy.get('.mermaid-diagram').find('svg').should('exist');
  });

  it('shows error on fetch fail', () => {
    cy.intercept('GET', '/articles/does-not-exist.md', { statusCode: 404 });
    cy.visit('/sparrow-ai-tech/markdown-test?src=./articles/does-not-exist.md');
    cy.contains('Error').should('exist');
  });

  it('shows image preview on hover for image links', () => {
    // This markdown file should contain: [Alt text](/assets/images/test-image.png)
    cy.visit('/sparrow-ai-tech/markdown-test?src=./articles/image-link-test.md');
    cy.contains('Alt text').trigger('mouseover');
    cy.get('.tippy-box img').should('be.visible').and(($img) => {
      expect($img[0].src).to.match(/test-image\.png$/);
    });
  });

  it('shows Mermaid diagram preview on hover for .mmd links', () => {
    // /articles/mermaid-test-link.md should contain: [Diagram](/articles/test-diagram.mmd)
    cy.visit('/sparrow-ai-tech/markdown-test?src=./articles/mermaid-test-link.md');
    cy.contains('Diagram').trigger('mouseover');
    cy.get('.tippy-box .mermaid-diagram svg').should('be.visible');
  });

  it('shows GitHub repo metadata tooltip on hover for repo links', () => {
    // /articles/github-link-test.md should contain: [MCP Prompts](https://github.com/sparesparrow/mcp-prompts)
    cy.visit('/sparrow-ai-tech/markdown-test?src=./articles/github-link-test.md');
    cy.contains('MCP Prompts').trigger('mouseover');
    cy.get('.tippy-box').should('contain.text', 'sparesparrow/mcp-prompts');
    cy.get('.tippy-box').should('contain.text', 'stars').or('contain.text', '‚≠ê');
    cy.get('.tippy-box').should('contain.text', 'forks').or('contain.text', 'üç¥');
  });

  // Example: Use data-cy selectors for markdown/mermaid viewer if present
  cy.get('[data-cy="articles-section"]').should('exist');
});