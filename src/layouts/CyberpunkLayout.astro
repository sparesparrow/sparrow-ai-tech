---
import { pageUrl, assetUrl } from '../utils/url.js';
import { url } from '../utils/url.js';

import '../css/main.css';

export interface Props {
  title: string;
  description?: string;
}

const {
  title,
  description = 'MCP Pioneer & AI Integration Specialist - Automatizační šílenec specializující se na Model Context Protocol, AI-driven development a bezpečnou správu serverů.',
} = Astro.props;

const base = import.meta.env.BASE_URL || '/sparrow-ai-tech';
const lang = Astro.url.searchParams.get('lang') || 'cs';
---

<!doctype html>
<html lang="cs" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta
      name="keywords"
      content="MCP, Model Context Protocol, AI Integration, Automation, Rust, TypeScript, AI Development, Sparrow AI Tech, Vojtěch Špaček"
    />
    <meta name="author" content="Vojtěch Špaček (sparesparrow)" />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://sparesparrow.github.io/sparrow-ai-tech/" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content="https://sparesparrow.github.io/sparrow-ai-tech/" />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />

    <link rel="icon" type="image/svg+xml" href={`${import.meta.env.BASE_URL}favicon.svg`} />
    <title>{title}</title>

    <!-- Preload important fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;700&family=Inter:wght@400;500;600&display=swap"
      rel="stylesheet"
    />

    <!-- Import cyberpunk styles -->
    <style>
      @import url('/src/styles/cyberpunk.css');
    </style>
  </head>
  <body>
    <!-- Enhanced Navigation -->
    <nav class="cyber-nav">
      <div class="cyber-nav-container">
        <div class="cyber-nav-logo cyber-glitch">🐦 sparesparrow</div>
        <div class="cyber-nav-links">
          <a href="#home" class="cyber-nav-link active">Home</a>
          <a href="#features" class="cyber-nav-link">Expertise</a>
          <a href="#projects" class="cyber-nav-link">MCP Projects</a>
          <a href="#agentic" class="cyber-nav-link">Agentic Workflows</a>
          <a href="#philosophy" class="cyber-nav-link">Philosophy</a>
          <a href={`${import.meta.env.BASE_URL}mermaid-editor`} class="cyber-nav-link">Mermaid Editor</a>
          <a href={`${import.meta.env.BASE_URL}chatbot`} class="cyber-nav-link">Chatbot</a>
          <a href="#contact" class="cyber-nav-link">Contact</a>
        </div>
      </div>
    </nav>

    <main>
      <slot />
    </main>

    <!-- Enhanced Footer -->
    <footer class="cyber-footer">
      <div class="cyber-container">
        <div class="footer-content">
          <div class="footer-section">
            <h4>MCP Pioneer</h4>
            <p>Specializace na Model Context Protocol, AI orchestration a automatizaci development workflow.</p>
          </div>
          <div class="footer-section">
            <h4>Technologies</h4>
            <div class="footer-tags">
              <span>Rust</span>
              <span>TypeScript</span>
              <span>MCP</span>
              <span>AI</span>
              <span>Docker</span>
            </div>
          </div>
          <div class="footer-section">
            <h4>Links</h4>
            <div class="footer-links">
              <a href="https://github.com/sparesparrow" target="_blank" rel="noopener noreferrer">GitHub</a>
              <a href="https://sparesparrow.github.io/cv/" target="_blank" rel="noopener noreferrer">CV</a>
              <a href={`${import.meta.env.BASE_URL}infographics/Infographic1/`}>MCP Infographics</a>
            </div>
          </div>
        </div>
        <div class="footer-bottom">
          <p>&copy; 2024 Vojtěch Špaček (sparesparrow) - Automatizační šílenec | Built with Astro & ❤️</p>
        </div>
      </div>
    </footer>

    <!-- ElevenLabs Voice Widget -->
    <elevenlabs-convai agent-id="agent_01jwpatrdff2dsns5d56n0ardm"></elevenlabs-convai>
    <script src="https://unpkg.com/@elevenlabs/convai-widget-embed" async type="text/javascript"></script>

    <!-- Enhanced Cyberpunk Scripts -->
    <script>
      // Enhanced Cyberpunk Interactive Features with Real Content
      document.addEventListener('DOMContentLoaded', function () {
        initTypewriter();
        initScrollAnimations();
        initNavigation();
        initProjectCards();
        initPhilosophyQuotes();
        initMatrixRain();
        initTerminalAnimation();
      });

      // Typewriter effect with real Czech text
      function initTypewriter() {
        const typewriterElement = document.getElementById('typewriter');
        if (!typewriterElement) return;

        const text = 'Automatizační šílenec, který se nikdy nenudí';
        let index = 0;

        function typeChar(typewriterElement: Element) {
          if (index < text.length) {
            typewriterElement.textContent += text.charAt(index);
            index++;
            setTimeout(typeChar, 100);
          }
        }

        // Start typing after a short delay
        setTimeout(typeChar, 1000);
      }

      // Enhanced scroll animations
      function initScrollAnimations() {
        const observerOptions = {
          threshold: 0.1,
          rootMargin: '0px 0px -50px 0px',
        };

        const observer = new IntersectionObserver(function (entries) {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add('visible');

              // Special handling for stats animation
              if (entry.target.classList.contains('cyber-stat-item')) {
                animateStatNumbers(entry.target);
              }
            }
          });
        }, observerOptions);

        // Add fade-in class to elements and observe them
        const animatedElements = document.querySelectorAll('.cyber-card, .fade-in, .cyber-stat-item');
        animatedElements.forEach(el => {
          el.classList.add('fade-in');
          observer.observe(el);
        });
      }

      // Animate statistics numbers
      function animateStatNumbers(statElement: Element) {
        const numberElement = statElement.querySelector('.cyber-stat-number');
        if (!numberElement) return;

        const finalText = numberElement.textContent;
        const finalNumber = parseInt(finalText?.replace(/[^\d]/g, '') || '0');

        if (isNaN(finalNumber)) return;

        let currentNumber = 0;
        const increment = Math.ceil(finalNumber / 50);
        const timer = setInterval(() => {
          currentNumber += increment;
          if (currentNumber >= finalNumber) {
            numberElement.textContent = finalText;
            clearInterval(timer);
          } else {
            numberElement.textContent =
              currentNumber + finalText?.replace(/[\d]/g, '').substring(finalNumber.toString().length) || '';
          }
        }, 50);
      }

      // Enhanced navigation
      function initNavigation() {
        // Smooth scroll for navigation links
        document.querySelectorAll('.cyber-nav-link').forEach(link => {
          link.addEventListener('click', function (e) {
            const targetId = this.getAttribute('href');

            // Skip if it's an external link or page link
            if (targetId.startsWith('http') || targetId.includes('/')) {
              return;
            }

            e?.preventDefault();
            const targetSection = document.querySelector(targetId);

            if (targetSection) {
              const navHeight = document.querySelector('.cyber-nav')?.offsetHeight || 0;
              const targetPosition = targetSection.offsetTop - navHeight - 20;

              window.scrollTo({
                top: targetPosition,
                behavior: 'smooth',
              });

              // Update active state
              document.querySelectorAll('.cyber-nav-link').forEach(navLink => {
                navLink.classList.remove('active');
              });
              (this as HTMLElement).classList.add('active');
            }
          });
        });

        // Update active nav link on scroll
        window.addEventListener('scroll', updateActiveNavLink);
      }

      function updateActiveNavLink() {
        const sections = document.querySelectorAll('section[id]');
        const navLinks = document.querySelectorAll('.cyber-nav-link');
        let currentSection = '';

        const scrollPosition = window.scrollY + 150;

        sections.forEach(section => {
          const sectionTop = section?.clientTop || 0;
          const sectionHeight = section?.clientHeight || 0;

          if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
            currentSection = section.getAttribute('id') || '';
          }
        });

        navLinks.forEach(link => {
          const href = link.getAttribute('href') || '';
          if (href && href.startsWith('#')) {
            link.classList.remove('active');
            if (href === '#' + currentSection) {
              link.classList.add('active');
            }
          }
        });
      }

      // Enhanced project cards functionality
      function initProjectCards() {
        const projectCards = document.querySelectorAll('.project-card');

        projectCards.forEach(card => {
          // Enhanced mouse events
          card.addEventListener('mouseenter', function (this: HTMLElement) {
            (this as HTMLElement).style.transform = 'translateY(-8px) scale(1.02)';

            // Add glow effect to tech tags
            const techTags = (this as HTMLElement).querySelectorAll('.tech-tag, .feature-tag');
            techTags.forEach(tag => {
              (tag as HTMLElement).style.boxShadow = '0 0 15px rgba(57, 255, 20, 0.3)';
            });
          });

          card.addEventListener('mouseleave', function (this: HTMLElement) {
            (this as HTMLElement).style.transform = 'translateY(0) scale(1)';

            // Remove glow effect
            const techTags = (this as HTMLElement).querySelectorAll('.tech-tag, .feature-tag');
            techTags.forEach(tag => {
              tag.style.boxShadow = '';
            });
          });

          // Make cards keyboard accessible
          card.setAttribute('tabindex', '0');
          card.setAttribute('role', 'button');

          const projectName = card.querySelector('.project-name');
          if (projectName) {
            card.setAttribute('aria-label', `Otevřit projekt ${projectName.textContent} na GitHubu`);
          }

          // Handle clicks on the entire card
          card.addEventListener('click', function (e: Event) {
            const target = e.target as HTMLElement;
            if (target?.closest('.project-link')) {
              return;
            }

            const projectLink = this.querySelector('.project-link') as HTMLAnchorElement;
            if (projectLink) {
              window.open(projectLink.href, '_blank');
            }
          });

          // Handle keyboard navigation
          card.addEventListener('keydown', function (e: KeyboardEvent) {
            if (e.key === 'Enter' || e.key === ' ') {
              e.preventDefault();
              const projectLink = this.querySelector('.project-link') as HTMLAnchorElement;
              if (projectLink) {
                window.open(projectLink.href, '_blank');
              }
            }
          });
        });
      }

      // Philosophy quotes typewriter effect
      function initPhilosophyQuotes() {
        const quotes = [
          "Programuji nejčastěji tak, že večer spustím orchestrační skript s nekonečným cyklem instrukcí typu 'Pokračuj dalším bodem ve svém seznamu úkolů'. Ráno cyklus zastavím a objevujem nové změny na svém domácím počítači.",
          'Automatizace pomocí různých nástrojů včetně AI mi umožňuje efektivně řešit komplexní problémy, které bych bez takových nástrojů řešit ani nezačal.',
          'Svoboda je pro mě základním pilířem smyslu života a předpokladem pro efektivní učení se novým dovednostem.',
          'Archetyp programátora, který sedí neustále u počítače, dnes podle mě neplatí. Moderní development je o orchestraci systémů a AI nástrojů.',
        ];

        const quoteElements = [
          document.getElementById('quote1'),
          document.getElementById('quote2'),
          document.getElementById('quote3'),
          document.getElementById('quote4'),
        ];

        // Observer for philosophy section
        const philosophyObserver = new IntersectionObserver(
          function (entries) {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                // Start typing quotes with delays
                quoteElements.forEach((element, index) => {
                  if (element) {
                    setTimeout(() => {
                      typeQuote(element, quotes[index]);
                    }, index * 1000);
                  }
                });
                philosophyObserver.unobserve(entry.target);
              }
            });
          },
          { threshold: 0.3 }
        );

        const philosophySection = document.getElementById('philosophy');
        if (philosophySection) {
          philosophyObserver.observe(philosophySection);
        }

        function typeQuote(element: Element, text: string) {
          let index = 0;
          element.textContent = '';

          function typeChar() {
            if (index < text.length) {
              element.textContent += text.charAt(index);
              index++;
              setTimeout(typeChar, 30);
            }
          }
          typeChar();
        }
      }

      // Terminal animation for hero section
      function initTerminalAnimation() {
        const terminalLines = document.querySelectorAll('.terminal-line.output');

        if (terminalLines.length === 0) return;

        // Animate terminal output with delays
        terminalLines.forEach((line, index) => {
          line.style.opacity = '0';
          line.style.transform = 'translateX(-20px)';

          setTimeout(
            () => {
              line.style.transition = 'all 0.5s ease';
              line.style.opacity = '1';
              line.style.transform = 'translateX(0)';
            },
            (index + 1) * 800
          );
        });
      }

      // Enhanced matrix rain effect
      function initMatrixRain() {
        if (window.innerWidth <= 768) return; // Skip on mobile

        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        if (!ctx) return;

        canvas.style.position = 'fixed';
        canvas.style.top = '0';
        canvas.style.left = '0';
        canvas.style.width = '100%';
        canvas.style.height = '100%';
        canvas.style.pointerEvents = 'none';
        canvas.style.zIndex = '-1';
        canvas.style.opacity = '0.03';

        document.body.appendChild(canvas);

        function resizeCanvas() {
          canvas.width = window.innerWidth;
          canvas.height = window.innerHeight;
        }

        resizeCanvas();

        // MCP-themed matrix characters
        const matrix = 'MCP{}[]()ABCDEFGHIJKLMNOPQRSTUVWXYZ123456789@#$%^&*()ĄŻČĐĘŁŃÓŚŤÜŽ';
        const matrixArray = matrix.split('');
        const fontSize = 10;
        let columns = Math.floor(canvas.width / fontSize);
        let drops: number[] = [];

        function initDrops() {
          drops = [];
          for (let x = 0; x < columns; x++) {
            drops[x] = 1;
          }
        }

        initDrops();

        function draw() {
          ctx.fillStyle = 'rgba(13, 17, 23, 0.04)';
          ctx.fillRect(0, 0, canvas.width, canvas.height);

          ctx.fillStyle = '#39ff14';
          ctx.font = fontSize + 'px monospace';

          for (let i = 0; i < drops.length; i++) {
            const text = matrixArray[Math.floor(Math.random() * matrixArray.length)];
            ctx.fillText(text, i * fontSize, drops[i] * fontSize);

            if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {
              drops[i] = 0;
            }
            drops[i]++;
          }
        }

        const matrixInterval = setInterval(draw, 35);

        // Handle window resize
        window.addEventListener('resize', function () {
          resizeCanvas();
          columns = Math.floor(canvas.width / fontSize);
          initDrops();
        });
      }

      // Add glitch effect to specific elements
      const glitchElements = document.querySelectorAll('.cyber-glitch');

      glitchElements.forEach(element => {
        element.addEventListener('mouseenter', function (this: HTMLElement) {
          this.style.animation = 'glitch 0.3s ease-in-out';
        });

        element.addEventListener('animationend', function (this: HTMLElement) {
          this.style.animation = '';
        });
      });

      // Parallax effect for hero section
      window.addEventListener('scroll', function () {
        const scrolled = window.pageYOffset;
        const heroElements = document.querySelectorAll('.cyber-hero-parallax');

        heroElements.forEach(element => {
          const rate = scrolled * -0.2;
          element.style.transform = `translateY(${rate}px)`;
        });
      });
    </script>
  </body>
</html>

<style>
  .cyber-footer {
    background: var(--color-cyber-surface);
    border-top: 1px solid var(--color-cyber-border);
    padding: 3rem 0 1rem;
    margin-top: 4rem;
  }

  .footer-content {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
    margin-bottom: 2rem;
  }

  .footer-section h4 {
    color: var(--color-cyber-green);
    margin-bottom: 1rem;
    font-size: 1.1rem;
  }

  .footer-section p {
    color: var(--color-cyber-text-dim);
    line-height: 1.5;
    margin: 0;
  }

  .footer-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .footer-tags span {
    background: rgba(57, 255, 20, 0.1);
    color: var(--color-cyber-green);
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.8rem;
    border: 1px solid rgba(57, 255, 20, 0.3);
  }

  .footer-links {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .footer-links a {
    color: var(--color-cyber-text-dim);
    text-decoration: none;
    transition: color 0.3s ease;
  }

  .footer-links a:hover {
    color: var(--color-cyber-blue);
  }

  .footer-bottom {
    padding-top: 2rem;
    border-top: 1px solid var(--color-cyber-border);
    text-align: center;
  }

  .footer-bottom p {
    color: var(--color-cyber-text-dim);
    margin: 0;
    font-size: 0.9rem;
  }

  @media (max-width: 768px) {
    .footer-content {
      grid-template-columns: 1fr;
      text-align: center;
    }

    .cyber-nav-links {
      display: none;
    }
  }
</style>
